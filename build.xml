<?xml version="1.0"?>
<project name="geWorkBench" default="run">
	<!-- ===================================================================== -->
	<!-- INIT  -->
	<!-- ===================================================================== -->
	<target name="init" description="Initializes the build environment.">
		<!-- Project-wide properties -->
		<!-- App name -->
		<property name="app" value="geWorkbench" />
		<property name="version" value="development" />
		<!-- DEBUG setting -->
		<property name="debug" value="on" />
		<!-- Paths -->
		<property name="classes" value="classes" />
		<property name="conf" value="conf" />
		<property name="temp" value="temp" />
		<property name="testing" value="testing" />
		<property name="test.reports" value="${testing}/junitreport" />
		<!-- Java Source -->
		<property name="src" value="src" />
		<property name="test" value="test" />
		<property name="conf" value="conf" />
		<!-- Directory for releases -->
		<property name="dist" value="dist" />
		<!-- Directory for releases -->
		<property name="cleanFolder" value="../cleanFolder" />
		<!-- Directory for developer kit releases -->
		<property name="dev" value="devkit" />
		<!-- Source directory for resources -->
		<property name="res" value="res" />
		<!-- Directory for Javadoc -->
		<property name="docs" value="web/api" />
		<!-- The executable libs -->
		<property name="lib" value="lib" />
		<!-- The executable 64bit libs -->
		<property name="lib64" value="lib64" />
		<!-- The components directory -->
		<property name="components" value="components" />
		<!-- Release info -->
		<property name="release.file" value="${dist}/${app}-${version}" />
		<!-- Release info -->
		<property name="devkit.file" value="${dist}/${app}_v${version}-SDK" />
		<!-- Location to write reports -->
		<property name="reports" value="reports" />
		<condition property="32bit">
			<equals arg1="${sun.arch.data.model}" arg2="32" />
		</condition>
		<condition property="64bit">
			<equals arg1="${sun.arch.data.model}" arg2="64" />
		</condition>
	</target>
	<target name="classpath.32" depends="init" if="32bit">
		<property name="Dlib" value="${lib}" />
		<echo message="32bit: ${32bit}" />
	</target>
	<target name="classpath.64" depends="init" if="64bit">
		<property name="Dlib" value="${lib64};${lib}" />
		<echo message="64bit: ${64bit}" />
	</target>
	<!-- ===================================================================== -->
	<!-- PREPARE  -->
	<!-- ===================================================================== -->
	<target name="prepare" depends="init, classpath.32, classpath.64" description="Prepares for compilation.">
		<mkdir dir="${classes}" />
		<path id="classpath">
			<fileset dir="${lib}">
				<include name="**/*.jar" />
			</fileset>
		</path>
		<!-- Classpath for running -->
		<path id="run.classpath">
			<pathelement location="${classes}" />
			<pathelement location="${conf}" />
			<path refid="classpath" />
		</path>
		<!-- BootClasspath for running jdic on mac -->
		<path id="bootclasspath">
			<pathelement path="/Library/Java/Home/lib/plugin.jar:/Library/Java/Home/lib/deploy.jar"/>
		</path>
		<property name="bootclasspath" refid="bootclasspath"/>
	</target>
	<!-- ===================================================================== -->
	<!-- COMPILE  -->
	<!-- ===================================================================== -->
	<target name="compile" depends="prepare" description="Compiles core and component .java source code.">
		<javac srcdir="${src}" destdir="${classes}" debug="${debug}" source="1.6" target="1.6" memorymaximumsize="256M" fork="true">
			<classpath>
				<path refid="classpath" />
			</classpath>
		</javac>
		<copy todir="${classes}">
			<fileset dir="${src}">
				<exclude name="CVS" />
				<exclude name="**/*.java" />
			</fileset>
		</copy>
		<!-- Compile components -->
		<subant target="compile" genericantfile="build-component.xml">
			<dirset dir="components" >
				<include name="alignment" />
				<include name="analysis" />
				<include name="annotations" />
				<include name="anova" />
				<include name="aracne-java" />
				<include name="caarray" />
				<include name="celprocessing" />
				<include name="cgems" />
				<include name="colormosaic" />
				<include name="cupid" />
				<include name="cytoscape" />
				<include name="discovery" />
				<include name="evidenceintegration" />
				<include name="filtering" />
				<include name="foldchange" />
				<include name="geneontology2" />
				<include name="genspace" />
				<include name="geworkbench-core" />
				<include name="gpmodule_v3_0" />
				<include name="hierarchicalclustering" />
				<include name="idea" />
				<include name="interactions" />
				<include name="jmol" />
				<include name="markus" />
				<include name="masterregulator" />
				<include name="matrixreduce" />
				<include name="medusa" />
				<include name="microarrays" />
				<include name="mindy" />
				<include name="netboost" />
				<include name="normalization" />
				<include name="plots" />
				<include name="poshistogram" />
				<include name="promoter" />
				<include name="pudge" />
				<include name="selectors" />
				<include name="sequenceretriever" />
				<include name="sequences" />
				<include name="skybase" />
				<include name="skybaseview" />
				<include name="skyline" />
				<!-- include name="skylinecontour" / -->
				<include name="skylineview" />
				<include name="somclustering" />
				<include name="ttest" />
				<include name="versioninfo" />
				<include name="viewers" />
			</dirset>
		</subant>
		<chmod file="./bin/matrixreduce/FitModelMac" perm="700"/>
		<chmod file="./bin/matrixreduce/FitModel" perm="700"/>
	</target>
	<!-- ===================================================================== -->
	<!-- DIST  -->
	<!-- ===================================================================== -->
	<target name="dist" depends="compile" description="Builds a zip file distribution.">
		<delete dir="${dist}" />
		<mkdir dir="${dist}" />
		<zip destfile="${release.file}.zip">
			<fileset dir=".">
				<include name="${classes}/**/*" />
				<include name="${components}/**/*" />
				<exclude name="${components}/**/src/*" />
				<include name="annotation/**/*" />
				<include name="${lib}/**/*" />
				<include name="caWorkbenchLicense.txt" />
				<include name="java.policy" />
				<include name="*annot.csv" />
			</fileset>
			<fileset dir="bin">
				<include name="build.xml" />
			</fileset>
		</zip>
	</target>
	<!-- ===================================================================== -->
	<!-- DEV  -->
	<!-- ===================================================================== -->
	<target name="dev" depends="compile,javadoc" description="Builds a developer kit (zip file).">
		<mkdir dir="${dist}" />
		<delete dir="${dev}" />
		<mkdir dir="${dev}" />
		<mkdir dir="${dev}/components" />
		<mkdir dir="${dev}/conf" />
		<mkdir dir="${dev}/core" />
		<mkdir dir="${dev}/sampleData" />
		<copy todir="${dev}/libraries">
			<fileset dir="${lib}" />
		</copy>
		<copy todir="${dev}/components">
			<fileset dir="${components}">
				<include name="analysis/**/*" />
				<include name="somclustering/**/*" />
				<include name="colormosaic/**/*" />
				<include name="example/**/*" />
				<include name="filtering/**/*" />
				<include name="hierarchicalclustering/**/*" />
				<include name="microarrays/**/*" />
				<include name="normalization/**/*" />
				<include name="plots/**/*" />
				<include name="selectors/**/*" />
				<include name="sequences/**/*" />
				<include name="versioninfo/**/*" />
				<include name="viewers/**/*" />
			</fileset>
		</copy>
		<copy todir="${dev}/sampleData">
			<fileset dir="data">
				<include name="web100.exp" />
				<include name="rmaExpressSample.txt" />
				<include name="histoall.fa" />
				<include name="aml8_924_ab_hu68_4000markers.txt" />
				<include name="aml8_965_ab_hu68_4000markers.txt" />
				<include name="21161 neu10-4000markers.gpr" />
				<include name="21162 ras7-4000markers.gpr" />
			</fileset>
		</copy>
		<copy todir="${dev}/docs">
			<fileset dir="${docs}" />
		</copy>
		<copy todir="${dev}/conf" file="${conf}/minimal.xml" />
		<copy todir="${dev}/conf" file="${conf}/application.properties" />
		<copy file="devBuild.xml" tofile="${dev}/build.xml" />
		<copy file="devReadme.txt" tofile="${dev}/readme.txt" />
		<copy file="devSource.txt" tofile="${dev}/src/readme.txt" />
		<copy file="devLib.txt" tofile="${dev}/lib/readme.txt" />
		<copy todir="${dev}" file="java.policy" />
		<mkdir dir="${dev}/src" />
		<mkdir dir="${dev}/lib" />
		<jar destfile="${dev}/core/geworkbench-core.jar">
			<fileset dir="${classes}" />
			<manifest>
				<attribute name="core-version" value="${version}" />
			</manifest>
		</jar>
		<zip destfile="${devkit.file}.zip">
			<fileset dir="devkit" />
		</zip>
	</target>
	<!-- ===================================================================== -->
	<!-- SRC-DIST  -->
	<!-- ===================================================================== -->
	<target name="src-dist" depends="compile" description="Builds a zip file distribution, including source.">
		<delete dir="${dist}" />
		<mkdir dir="${dist}" />
		<zip destfile="${release.file}.zip">
			<fileset dir=".">
				<include name="${classes}/**/*" />
				<include name="${src}/**/*" />
				<include name="${docs}/**/*" />
				<include name="${components}/**/*" />
				<!-- Leave out the following components due to prohibitive size -->
				<exclude name="${components}/sequenceretriever/**/*" />
				<exclude name="${components}/goterms/**/*" />
				<exclude name="${components}/gsea/**/*" />
				<exclude name="${components}/gominer/**/*" />
				<!-- Leave out the following components due to Windows native calls -->
				<exclude name="${components}/associationdiscovery/**/*" />
				<exclude name="${components}/cytoscape/**/*" />
				<!-- Leave out the following components due to dependence on one of the above components -->
				<exclude name="${components}/pathwaydecoder/**/*" />
				<include name="annotation/**/*" />
				<include name="${lib}/**/*" />
				<include name="caWorkbenchLicense.txt" />
				<include name="java.policy" />
				<!-- <include name="*annot.csv"/> -->
			</fileset>
			<fileset dir="bin">
				<include name="build.xml" />
			</fileset>
		</zip>
	</target>
	<!-- ===================================================================== -->
	<!-- CLEAN  -->
	<!-- ===================================================================== -->
	<target name="clean" description="Clean all build products." depends="init">
		<delete dir="${classes}" />
		<delete dir="${temp}" />
		<!-- Compile components -->
		<subant target="clean" genericantfile="build-component.xml">
			<dirset dir="components" includes="*" />
		</subant>
		<delete dir="components/genspace/conf" />
		<delete dir="components/analysis/conf" />
		<property file="conf/application.properties" />
		<antcall target="cleanSettingFromDefaultLocation" />
		<antcall target="cleanSettingFromUserLocation" />
	</target>
	<target name="cleanSettingFromDefaultLocation" unless="user.setting.directory">
		<echo message="clean settings from default location"/>
		<delete verbose="true">
			<fileset dir="components" includes="*/*.ccmproperties"/>
			<fileset dir="components" includes="*/savedParams/*"/>
		</delete>
	</target>
	<target name="cleanSettingFromUserLocation" if="user.setting.directory">
		<echo message="clean settings from user location ${user.home}${file.separator}${user.setting.directory} "/>
		<delete verbose="true">
			<fileset dir="${user.home}${file.separator}${user.setting.directory}" />
		</delete>
	</target>
	<!-- ====================================================================== -->
	<!-- JAVADOC -->
	<!-- ====================================================================== -->
	<target name="javadoc" depends="prepare" description="Creates javadocs for core only.">
		<javadoc maxmemory="256M" destdir="${docs}" packagenames="*">
			<classpath refid="classpath" />
			<packageset dir="${src}" defaultexcludes="yes">
				<include name="org/geworkbench/**" />
			</packageset>
		</javadoc>
	</target>
	<!-- ====================================================================== -->
	<!-- RUN -->
	<!-- ====================================================================== -->
	<target name="run" depends="compile" description="Runs geWorkbench.">
		<java fork="true" classname="org.geworkbench.engine.config.UILauncher">
			<jvmarg value="-Xss1024k" />
			<jvmarg value="-Xmx1024M" />
			<jvmarg value="-XX:MaxPermSize=128m" />
			<jvmarg value="-Djava.library.path=${Dlib}" />
			<jvmarg value="-Xbootclasspath/p:${bootclasspath}" />
			<classpath refid="run.classpath" />
		</java>
	</target>
	<target name="run-mindy" depends="compile" description="Runs mindy test application.">
		<path id="mindy.classpath">
			<pathelement location="components/mindy/${classes}" />
			<pathelement location="components/mindy/lib/swingx-2006_10_27.jar" />
			<path refid="run.classpath" />
		</path>
		<java fork="true" classname="org.geworkbench.components.mindy.test.MindyTest">
			<jvmarg value="-Xmx640M" />
			<jvmarg value="-Djava.library.path=lib" />
			<classpath refid="mindy.classpath" />
		</java>
	</target>
	<!-- ====================================================================== -->
	<!-- RUN PRODUCTION-->
	<!-- ====================================================================== -->
	<target name="run-prod" depends="compile" description="Runs geWorkbench.">
		<java fork="true" classname="org.geworkbench.engine.config.UILauncher">
			<jvmarg value="-Xmx640M" />
			<jvmarg value="-XX:MaxPermSize=128m" />
			<jvmarg value="-Djava.library.path=lib" />
			<arg value="all.xml" />
			<classpath refid="run.classpath" />
		</java>
	</target>
	<!-- ====================================================================== -->
	<!-- RUN SILENT -->
	<!-- ====================================================================== -->
	<target name="run-silent" depends="compile" description="Runs geWorkbench.">
		<java fork="true" classname="org.geworkbench.engine.config.UILauncher">
			<jvmarg value="-Xmx640M" />
			<jvmarg value="-Djava.library.path=lib" />
			<redirector output="NUL" />
			<classpath refid="run.classpath" />
		</java>
	</target>
	<!-- ====================================================================== -->
	<!-- RUN ComboxBox Flavor-->
	<!-- ====================================================================== -->
	<target name="runNewFlavor" depends="compile" description="Runs geWorkbench.">
		<java fork="true" classname="org.geworkbench.engine.config.UILauncher">
			<jvmarg value="-Xmx640M" />
			<jvmarg value="-Djava.library.path=lib" />
			<arg value="all_combobox.xml" />
			<classpath refid="run.classpath" />
		</java>
	</target>
	<!-- ====================================================================== -->
	<!-- TEST -->
	<!-- ====================================================================== -->
	<target name="test" depends="compile" description="Runs all tests with source of the form **/test/Test*.java">
		<!--<taskdef name="junit" classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask">-->
		<!--<classpath>-->
		<!--<pathelement location="lib/junit.jar"/>-->
		<!--</classpath>-->
		<!--</taskdef>-->
		<delete dir="testResults" />
		<mkdir dir="testResults" />
		<junit printsummary="yes" haltonfailure="false">
			<classpath refid="run.classpath" />
			<formatter type="xml" />
			<!--
                        <test name="org.geworkbench.bison.testing.TestAll" haltonfailure="no" todir="testResults">
                            <formatter type="xml"/>
                        </test>
            -->
			<batchtest fork="yes" todir="testResults">
				<formatter type="xml" />
				<fileset dir="${src}">
					<include name="org/geworkbench/**/test/Test*.java" />
					<include name="org/geworkbench/bison/testing/TestCSPanel.java" />
				</fileset>
			</batchtest>
		</junit>
		<property name="junitreport" value="${reports}/junitreport" />
		<delete dir="${junitreport}" />
		<mkdir dir="${junitreport}" />
		<junitreport todir="${reports}">
			<fileset dir="testResults">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${junitreport}" />
		</junitreport>
	</target>
	<!-- ====================================================================== -->
	<!-- Prepare a clean file for depositing to NCI CVS -->
	<!-- ====================================================================== -->
	<target name="createCleanSource" depends="compile" description="Creating a new folder for depositing...">
		<delete dir="../cleanResource" />
		<mkdir dir="../cleanResource" />
		<copy todir="../cleanResource">
			<fileset dir=".">
				<exclude name="CVS" />
				<exclude name="**/*.cvsignore" />
			</fileset>
		</copy>
	</target>
	<target name="gear" depends="init" description="Create a .gear file out of a component. Specify a directory containing a component like -Dcomponent=name">
		<property name="component" value="" />
		<echo message="Going to create .gear file out of directory: ${components}/${component}" />
		<jar destfile="${component}.gear" basedir="${components}/${component}" includes="classes/**,lib/**">
			<manifest>
				<attribute name="core-version" value="${version}" />
			</manifest>
		</jar>
	</target>
	<!-- JUnit Run and Report -->
	<target name="junit-run" depends="compile" description="Run JUnit tests and produce success report.">
		<taskdef name="junit" classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask" />
		<delete dir="${testing}" />
		<mkdir dir="${testing}" />
		<junit fork="yes" dir="${basedir}" failureProperty="test.failed" printsummary="yes">
			<jvmarg value="-Xmx640M" />
			<jvmarg value="-Djava.awt.headless=true" />
			<classpath refid="run.classpath" />
			<formatter type="xml" />
			<!--<test name="wb.test.TestAll" todir="${testing}"/>-->
			<batchtest todir="${testing}" unless="testcase">
				<fileset dir="${test}">
					<include name="**/*Test.java" />
					<exclude name="**/BulkTest.java" />
					<exclude name="**/*GuiTest.java" />
				</fileset>
			</batchtest>
		</junit>
		<mkdir dir="${test.reports}" />
		<junitreport todir="${test.reports}">
			<fileset dir="${testing}">
				<include name="TEST-*.xml" />
			</fileset>
			<report todir="${test.reports}" />
		</junitreport>
		<subant target="junit-run" genericantfile="build-component.xml">
			<dirset dir="components" includes="*" />
		</subant>
		<fail>
			<condition>
				<isset property="test.failed" />
			</condition>
		</fail>
	</target>
	<!-- ====================================================================== -->
	<!-- CLEAR   DISTRIBUTION-->
	<!-- ====================================================================== -->
	<target name="cleanDist" depends="init" description="Clean the folder for depositing...">
		<delete dir="${cleanFolder}" />
	</target>
	<!-- ====================================================================== -->
	<!-- CREATE CLEAN DISTRIBUTION-->
	<!-- ====================================================================== -->
	<target name="createCleanDist" depends="cleanDist, createDist" description="Creating a new folder for depositing...">

	</target>
	<!-- ====================================================================== -->
	<!-- CREATE CORE JARS-->
	<!-- ====================================================================== -->
	<target name="jar" depends="compile" description="Creating geWorkbench core jars">
		<jar destfile="geworkbench-parsers.jar" basedir="${classes}" includes="org/geworkbench/parsers/**">
			<manifest>
				<attribute name="Built-By" value="${user.name}" />

				<!-- attribute name="Class-Path" value="" / -->
				<!-- attribute name="Main-Class" value="" / -->
			</manifest>
		</jar>
		<jar destfile="geworkbench-engine.jar" basedir="${classes}" includes="org/geworkbench/engine/**">
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
			</manifest>
		</jar>
		<jar destfile="geworkbench-events.jar" basedir="${classes}" includes="org/geworkbench/events/**">
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
			</manifest>
		</jar>
		<jar destfile="geworkbench-builtin.jar" basedir="${classes}" includes="org/geworkbench/builtin/**">
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
			</manifest>
		</jar>
		<jar destfile="geworkbench-util.jar" basedir="${classes}" includes="org/geworkbench/util/**">
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
			</manifest>
		</jar>
		<jar destfile="geworkbench-bison.jar" basedir="${classes}" includes="org/geworkbench/bison/**">
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
			</manifest>
		</jar>
		<jar destfile="geworkbench-others.jar" basedir="${classes}" excludes="org/geworkbench/bison/**,org/geworkbench/engine/**,org/geworkbench/events/**,org/geworkbench/parsers/**,org/geworkbench/util/**,org/geworkbench/builtin/**">
		</jar>

		<!-- jar components -->
		<subant target="jar" genericantfile="build-component.xml">
			<dirset dir="components">
				<include name="analysis" />
				<include name="ttest" />
				<include name="hierarchicalclustering" />
				<!-- exclude the dead projets -->
				<exclude name="skylinecontour" />
			</dirset>
		</subant>
	</target>
	<!-- ====================================================================== -->
	<!-- CREATE   DISTRIBUTION-->
	<!-- ====================================================================== -->
	<target name="createDist" depends="compile, jar" description="Creating a new folder for depositing...">
		<java classname="org.geworkbench.components.versioninfo.VersionInfoDialog" failonerror="true" >
			<arg value="./components/versioninfo/classes/org/geworkbench/components/versioninfo/" />
			<classpath>
				<path refid="classpath" />
				<pathelement location="./components/versioninfo/classes" />
			</classpath>
		</java>

		<mkdir dir="${cleanFolder}" />
		<mkdir dir="${cleanFolder}/log" />
		<echo>Begin to create a new source, which is located at ${cleanFolder}, please wait...</echo>
		<move todir="${cleanFolder}" >
			<fileset dir=".">
				<!-- geworkbenh core jars -->
				<include name="*.jar" />
			</fileset>
		</move>
		<copy todir="${cleanFolder}" includeEmptyDirs="NO">
			<fileset dir=".">

				<exclude name="CVS" />
				<exclude name="${conf}/**/*" />

				<!-- Include the following components for distribution -->
				<include name="bin/matrixreduce/*" />
				<include name="${components}/alignment/**/*" />
				<include name="${components}/analysis/**/*" />
				<include name="${components}/annotations/**/*" />
				<include name="${components}/anova/**/*" />
				<include name="${components}/aracne-java/**/*" />
				<include name="${components}/caarray/**/*" />
				<include name="${components}/celprocessing/**/*" />

				<include name="${components}/somclustering/**/*" />
				<include name="${components}/colormosaic/**/*" />
				<include name="${components}/cytoscape/**/*" />
				<include name="${components}/discovery/**/*" />
				<include name="${components}/filtering/**/*" />
				<include name="${components}/foldchange/**/*" />
				<include name="${components}/geneontology2/**/*" />
				<include name="${components}/genspace/**/*" />
				<include name="${components}/gpmodule_v3_0/**/*" />
				<include name="${components}/hierarchicalclustering/**/*" />
				<include name="${components}/idea/**/*" />
				<include name="${components}/interactions/**/*" />
				<include name="${components}/jmol/**/*" />
				<include name="${components}/masterregulator/**/*" />
				<include name="${components}/matrixreduce/**/*" />
				<include name="${components}/microarrays/**/*" />
				<include name="${components}/mindy/**/*" />

				<include name="${components}/normalization/**/*" />

				<include name="${components}/plots/**/*" />
				<include name="${components}/poshistogram/**/*" />
				<include name="${components}/promoter/**/*" />
				<include name="${components}/pudge/**/*" />
				<include name="${components}/selectors/**/*" />
				<include name="${components}/sequenceretriever/**/*" />
				<include name="${components}/sequences/**/*" />

				<include name="${components}/versioninfo/**/*" />
				<include name="${components}/viewers/**/*" />
				<include name="${components}/markus/**/*" />

				<include name="${components}/skyline/**/*" />
				<include name="${components}/skylineview/**/*" />
				<include name="${components}/skybase/**/*" />
				<include name="${components}/skybaseview/**/*" />

				<include name="${components}/ttest/**/*" />

				<!-- Leave out the following components for release -->
				<exclude name="**/synteny/*" />
				<exclude name="**/src/**" />
				<exclude name="**/test/**" />

				<include name="annotation/**/*" />
				<include name="${lib}/**/*" />
				<include name="${lib64}/**/*" />
				<include name="geWorkbenchLicense.txt" />
				<include name="ReleaseNotes_2.3.0.txt" />
				<include name="welcometext.html" />
				<include name="java.policy" />

				<include name="Bcell-100.exp_ARACNe_AP_threshold.txt" />
				<include name="Bcell-100.exp_ARACNe_FBW_kernel.txt" />
				<include name="Bcell-100.exp_ARACNe_FBW_threshold.txt" />

				<include name="launch_geworkbench.bat" />
				<include name="launch_geworkbench.sh" />
				<exclude name="**/*.cvsignore" />
				<exclude name="data" />
				<exclude name="nbproject" />
				<include name="data/cardiogenomics.med.harvard.edu/**" />
				<include name="data/public_data/**" />
				<include name="data/jaspar_CORE/**" />
				<include name="data/gene_ontology.1_2.obo"/>
			</fileset>
		</copy>
		<copy todir="${cleanFolder}/conf" includeEmptyDirs="NO">
			<fileset dir="./conf">
				<include name="application.properties" />
				<include name="all.xml" />
				<include name="client-config.wsdd" />
				<include name="*.xsd" />
				<include name="*.dtd" />
				<include name="xml-mapping.xml" />
				<include name="unmarshaller-xml-mapping.xml" />
				<include name="application-config-client.xml" />
				<include name="jdic.properties" />
				<include name="log4j.properties" />
			</fileset>
		</copy>
		<copy file="build_runDirect.xml" tofile="${cleanFolder}/build.xml" />
	</target>
</project>
