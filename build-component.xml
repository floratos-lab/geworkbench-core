<?xml version="1.0" ?>
<project name="geWorkBench-component" default="compile">

    <!-- ===================================================================== -->
    <!-- INIT  -->
    <!-- ===================================================================== -->
    <target name="init" description="Initializes the build environment.">

        <!-- Project-wide properties -->
        <!-- Paths -->
        <property name="classes" value="classes"/>
    	<property name="conf" value="conf"/>
        <property name="debug" value="on"/>
        <!-- Java Source -->
        <property name="src" value="src"/>
        <property name="test" value="test"/>
        <!-- Source directory for resources -->
        <property name="res" value="res"/>
        <!-- Directory for Javadoc -->
        <property name="docs" value="web/api"/>
        <!-- The executable libs -->
        <property name="lib" value="lib"/>
        <!-- The parent project -->
        <property name="parentClasses" value="../../classes"/>
        <property name="parentLibs" value="../../lib"/>
		<property name="testing" value="testing" />
		<property name="test.reports" value="${testing}/junitreport" />
		<property name="reports" value="reports" />
    </target>

    <!-- ===================================================================== -->
    <!-- PREPARE  -->
    <!-- ===================================================================== -->
    <target name="prepare" depends="init" description="Prepares for compilation">
        <mkdir dir="${classes}"/>

        <!-- Classpath for compiling -->
        <path id="classpath">
            <fileset dir=".">
                <include name="lib/**/*.jar"/>
            </fileset>
            <pathelement location="${parentClasses}"/>
            <fileset dir="${parentLibs}">
                <include name="**/*.jar"/>
            </fileset>
        </path>
		<path id="run.classpath">
			<pathelement location="${classes}" />
			<pathelement location="${conf}" />
			<path refid="classpath" />
		</path>
    </target>

    <target name="compile-check" depends="prepare">
        <condition property="src-exists">
            <available file="${src}"/>
        </condition>
    </target>

    <!-- ===================================================================== -->
    <!-- COMPILE  -->
    <!-- ===================================================================== -->
    <target name="compile" depends="prepare, compile-check" description="Compiles .java source code." if="src-exists">
        <javac srcdir="${src}" destdir="${classes}" debug="${debug}" source="1.6" target="1.6" memorymaximumsize="256M" fork="true">
            <classpath>
                <path refid="classpath"/>
            </classpath>
        </javac>
        <copy todir="${classes}">
            <fileset dir="${src}">
                <exclude name="CVS"/>
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
    </target>

	<!-- ===================================================================== -->
    <!-- JAR  -->
    <!-- ===================================================================== -->
    <target name="jar" depends="compile" description="create a jar file for all files under classes">
		<basename property="filename" file="${basedir}" />
    	<jar destfile="${filename}.jar" basedir="${classes}" />
    </target>

    <!-- ===================================================================== -->
    <!-- CLEAN  -->
    <!-- ===================================================================== -->
    <target name="clean" description="Clean all build products." depends="init">
        <delete dir="${classes}"/>
    	<delete dir="${test}"/>
    </target>

    <!-- ====================================================================== -->
    <!-- JAVADOC -->
    <!-- ====================================================================== -->
    <target name="javadoc" depends="prepare">
        <javadoc maxmemory="256M" sourcepath="${src}" destdir="${docs}" packagenames="*">
            <classpath refid="classpath"/>
        </javadoc>
    </target>

    <!-- ====================================================================== -->
    <!-- TEST -->
    <!-- ====================================================================== -->
    <target name="test" depends="compile">
        <mkdir dir="testResults"/>
        <junit printsummary="yes" haltonfailure="yes">
            <classpath refid="run.classpath"/>

            <formatter type="plain"/>

            <batchtest fork="yes" todir="testResults">
                <fileset dir="${src}">
                    <include name="**/test/Test*.java"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

	<target name="junit-run" depends="compile" description="Run JUnit tests and produce success report." if="src-exists">
		<taskdef name="junit" classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask" />
		<delete dir="${testing}" />
		<mkdir dir="${testing}" />
		<junit fork="yes" dir="${basedir}" failureProperty="test.failed" printsummary="yes">
			<jvmarg value="-Xmx640M" />
			<jvmarg value="-Djava.awt.headless=true" />
			<classpath refid="run.classpath" />
			<formatter type="xml" />
			<!--<test name="wb.test.TestAll" todir="${testing}"/>-->
			<batchtest todir="${testing}" unless="testcase">
				<fileset dir="${test}">
					<include name="**/*Test.java" />
					<exclude name="**/BulkTest.java" />
				</fileset>
			</batchtest>
		</junit>
		<mkdir dir="${test.reports}" />
		<junitreport todir="${test.reports}">
			<fileset dir="${testing}">
				<include name="TEST-*.xml" />
			</fileset>
			<report todir="${test.reports}" />
		</junitreport>
	</target>

</project>