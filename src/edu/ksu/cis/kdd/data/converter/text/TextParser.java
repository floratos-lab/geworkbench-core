/* Generated By:JJTree&JavaCC: Do not edit this line. TextParser.java */
package edu.ksu.cis.kdd.data.converter.text;

/*
 * 
 * This file is part of Bayesian Network for Java (BNJ).
 *
 * BNJ is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * BNJ is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with BNJ in LICENSE.txt file; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * 
 */

/**
 * @author: Roby Joehanes
 */

import edu.ksu.cis.kdd.data.Database;
import edu.ksu.cis.kdd.data.Table;
import edu.ksu.cis.kdd.data.Tuple;
import edu.ksu.cis.kdd.data.converter.Converter;
import edu.ksu.cis.kdd.text.StopWords;

import java.io.FileInputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.LinkedList;

public class TextParser implements /*@bgen(jjtree)*/ TextParserTreeConstants, Converter, TextParserConstants {/*@bgen(jjtree)*/
    protected JJTTextParserState jjtree = new JJTTextParserState();
    private StopWords stopWords = StopWords.load();
    private TextProperty property;

    public TextParser() {
    }

    public void setTextProperty(TextProperty tp) {
        property = tp;
    }

    public void initialize() {
    }

    public Database load(InputStream r) {
        if (property == null) property = new TextProperty();
        TextParser p = new TextParser(r);
        p.property = property;
        Table tbl = p.CompilationUnit();
        Database db = new Database();
        return db;
    }

    public void save(OutputStream r, Database t) {
    }

    public static void help() {
        System.out.println("Text Parser:  Usage is one of:");
        System.out.println("         java TextParser < inputfile");
        System.out.println("OR");
        System.out.println("         java TextParser inputfile");
    }

    public static void main(String[] args) {
        if (args.length > 1) {
            help();
            return;
        }
        try {
            if (args.length == 0) {
                System.out.println("Text Parser:  Reading from standard input");
                new TextParser().load(System.in);
            } else if (args.length == 1) {
                System.out.println("Text Parser:  Reading from file " + args[0]);
                new TextParser().load(new FileInputStream(args[0]));
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
            System.out.println("Error!");
        }
    }

    final public Table CompilationUnit() throws ParseException {
        Table tuples = new Table(false);
        Tuple tuple;
        Token t1 = null;
        LinkedList list = new LinkedList();
        LinkedList wordlist = new LinkedList();
        label_1:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case IDENTIFIER:
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case IDENTIFIER:
                            t1 = jj_consume_token(IDENTIFIER);
                            break;
                        case FLOATING_POINT_LITERAL:
                            t1 = jj_consume_token(FLOATING_POINT_LITERAL);
                            break;
                        case INTEGER_LITERAL:
                            t1 = jj_consume_token(INTEGER_LITERAL);
                            break;
                        default:
                            jj_la1[0] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                    if (!stopWords.contains(t1.image)) {
                        list.add(new Integer(property.addWord(t1.image)));
                        wordlist.add(t1.image);
                    }
                    break;
                case LSHIFT:
                    jj_consume_token(LSHIFT);
                    t1 = jj_consume_token(IDENTIFIER);
                    jj_consume_token(RSIGNEDSHIFT);
                    list.add(new Integer(property.addClass(t1.image)));
                    //System.out.println(wordlist+" = "+t1.image); // $NON-NLS-1$
                    wordlist.clear();
                    tuple = new Tuple(list, tuples);
                    tuples.addTuple(tuple);
                    list = new LinkedList();
                    break;
                case LPAREN:
                case RPAREN:
                case LBRACE:
                case RBRACE:
                case LBRACKET:
                case RBRACKET:
                case SEMICOLON:
                case COMMA:
                case DOT:
                case LT:
                case BANG:
                case HOOK:
                case COLON:
                case DECR:
                case MINUS:
                case SLASH:
                case BIT_AND:
                case 72:
                case 73:
                case 74:
                case 75:
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case COMMA:
                            jj_consume_token(COMMA);
                            break;
                        case DOT:
                            jj_consume_token(DOT);
                            break;
                        case 72:
                            jj_consume_token(72);
                            break;
                        case 73:
                            jj_consume_token(73);
                            break;
                        case 74:
                            jj_consume_token(74);
                            break;
                        case LPAREN:
                            jj_consume_token(LPAREN);
                            break;
                        case RPAREN:
                            jj_consume_token(RPAREN);
                            break;
                        case COLON:
                            jj_consume_token(COLON);
                            break;
                        case SEMICOLON:
                            jj_consume_token(SEMICOLON);
                            break;
                        case MINUS:
                            jj_consume_token(MINUS);
                            break;
                        case DECR:
                            jj_consume_token(DECR);
                            break;
                        case LBRACKET:
                            jj_consume_token(LBRACKET);
                            break;
                        case RBRACKET:
                            jj_consume_token(RBRACKET);
                            break;
                        case LBRACE:
                            jj_consume_token(LBRACE);
                            break;
                        case RBRACE:
                            jj_consume_token(RBRACE);
                            break;
                        case LT:
                            jj_consume_token(LT);
                            break;
                        case 75:
                            jj_consume_token(75);
                            break;
                        case SLASH:
                            jj_consume_token(SLASH);
                            break;
                        case HOOK:
                            jj_consume_token(HOOK);
                            break;
                        case BANG:
                            jj_consume_token(BANG);
                            break;
                        case BIT_AND:
                            jj_consume_token(BIT_AND);
                            break;
                        default:
                            jj_la1[1] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                    break;
                default:
                    jj_la1[2] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case IDENTIFIER:
                case LPAREN:
                case RPAREN:
                case LBRACE:
                case RBRACE:
                case LBRACKET:
                case RBRACKET:
                case SEMICOLON:
                case COMMA:
                case DOT:
                case LT:
                case BANG:
                case HOOK:
                case COLON:
                case DECR:
                case MINUS:
                case SLASH:
                case BIT_AND:
                case LSHIFT:
                case 72:
                case 73:
                case 74:
                case 75:
                    ;
                    break;
                default:
                    jj_la1[3] = jj_gen;
                    break label_1;
            }
        }
        tuples.setProperty(property);
        {
            if (true) return tuples;
        }
        throw new Error("Missing return statement in function");
    }

    public TextParserTokenManager token_source;
    JavaCharStream jj_input_stream;
    public Token token, jj_nt;
    private int jj_ntk;
    private int jj_gen;
    final private int[] jj_la1 = new int[4];
    final private int[] jj_la1_0 = {0x244000, 0xff000000, 0xff244000, 0xff244000, };
    final private int[] jj_la1_1 = {0x0, 0x3500d9, 0x13500d9, 0x13500d9, };
    final private int[] jj_la1_2 = {0x0, 0xf00, 0xf00, 0xf00, };

    public TextParser(java.io.InputStream stream) {
        jj_input_stream = new JavaCharStream(stream, 1, 1);
        token_source = new TextParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 4; i++) jj_la1[i] = -1;
    }

    public void ReInit(java.io.InputStream stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 4; i++) jj_la1[i] = -1;
    }

    public TextParser(java.io.Reader stream) {
        jj_input_stream = new JavaCharStream(stream, 1, 1);
        token_source = new TextParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 4; i++) jj_la1[i] = -1;
    }

    public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 4; i++) jj_la1[i] = -1;
    }

    public TextParser(TextParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 4; i++) jj_la1[i] = -1;
    }

    public void ReInit(TextParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 4; i++) jj_la1[i] = -1;
    }

    final private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null)
            token = token.next;
        else
            token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    final public Token getNextToken() {
        if (token.next != null)
            token = token.next;
        else
            token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null)
                t = t.next;
            else
                t = t.next = token_source.getNextToken();
        }
        return t;
    }

    final private int jj_ntk() {
        if ((jj_nt = token.next) == null)
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        else
            return (jj_ntk = jj_nt.kind);
    }

    private java.util.Vector jj_expentries = new java.util.Vector();
    private int[] jj_expentry;
    private int jj_kind = -1;

    final public ParseException generateParseException() {
        jj_expentries.removeAllElements();
        boolean[] la1tokens = new boolean[76];
        for (int i = 0; i < 76; i++) {
            la1tokens[i] = false;
        }
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 4; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & (1 << j)) != 0) {
                        la1tokens[32 + j] = true;
                    }
                    if ((jj_la1_2[i] & (1 << j)) != 0) {
                        la1tokens[64 + j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 76; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.addElement(jj_expentry);
            }
        }
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = (int[]) jj_expentries.elementAt(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    final public void enable_tracing() {
    }

    final public void disable_tracing() {
    }

}
