/* Generated By:JJTree&JavaCC: Do not edit this line. LibBParser.java */
package edu.ksu.cis.bnj.bbn.converter.libb;

/*
 *
 * This file is part of Bayesian Network for Java (BNJ).
 *
 * BNJ is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * BNJ is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with BNJ in LICENSE.txt file; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */

import edu.ksu.cis.bnj.bbn.BBNConstant;
import edu.ksu.cis.bnj.bbn.BBNDiscreteValue;
import edu.ksu.cis.bnj.bbn.BBNGraph;
import edu.ksu.cis.bnj.bbn.BBNNode;
import edu.ksu.cis.bnj.bbn.converter.Converter;

import java.io.*;
import java.util.*;

public class LibBParser implements /*@bgen(jjtree)*/ LibBParserTreeConstants, Converter, LibBParserConstants {/*@bgen(jjtree)*/
    protected JJTLibBParserState jjtree = new JJTLibBParserState();
    protected BBNGraph graph;

    protected static String ln = System.getProperty("line.separator"); // $NON-NLS-1$

    public LibBParser() {
        // Do nothing, just to provide a stub
    }

    public BBNGraph load(InputStream r) throws ParseException {
        LibBParser p = new LibBParser(r);
        BBNGraph g = p.CompilationUnit();
        System.gc();
        return g;
    }

    public void save(OutputStream os, BBNGraph graph) {
        Writer stream = new OutputStreamWriter(os);
        try {
            stream.write("(network '" + graph.getName() + " :probability)" + ln + ln);
            Set nodes = graph.getNodes();
            for (Iterator i = nodes.iterator(); i.hasNext();) {
                BBNNode node = (BBNNode) i.next();
                stream.write("(var '" + node.getLabel() + " '(");
                BBNDiscreteValue dval = (BBNDiscreteValue) node.getValues();
                for (Iterator j = dval.iterator(); j.hasNext();) {
                    stream.write(j.next().toString());
                    if (j.hasNext()) stream.write(" ");
                }
                stream.write("))" + ln + ln);
            }
            for (Iterator i = nodes.iterator(); i.hasNext();) {
                BBNNode node = (BBNNode) i.next();
                String nodeName = node.getLabel();
                stream.write("(parents '" + nodeName + " '(");
                LinkedList parents = new LinkedList();
                parents.addAll(node.getParents());
                for (Iterator j = parents.iterator(); j.hasNext();) {
                    BBNNode parent = (BBNNode) j.next();
                    stream.write(parent.getLabel());
                    if (j.hasNext()) stream.write(" ");
                }
                stream.write(") '(");
                if (parents.size() > 0) {
                    stream.write(ln + saveCPT(parents, node, new Hashtable(), new LinkedList(), new StringBuffer()).trim());
                } else {
                    BBNDiscreteValue dval = (BBNDiscreteValue) node.getValues();
                    Hashtable queryTbl = new Hashtable();
                    for (Iterator j = dval.iterator(); j.hasNext();) {
                        queryTbl.put(nodeName, j.next().toString());
                        double value = node.query(queryTbl);
                        stream.write(new Float(value).toString());
                        if (j.hasNext()) stream.write(" ");
                    }
                }
                stream.write("))" + ln + ln);
            }
            stream.flush();
            stream.close();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    protected String saveCPT(LinkedList parents, BBNNode curNode, Hashtable curInst, LinkedList parentVals, StringBuffer buffer) {
        BBNNode parent = (BBNNode) parents.removeFirst();
        String parentName = parent.getLabel();
        BBNDiscreteValue pdval = (BBNDiscreteValue) parent.getValues();
        for (Iterator i = pdval.iterator(); i.hasNext();) {
            String value = i.next().toString();
            curInst.put(parentName, value);
            parentVals.add(value);
            if (parents.size() == 0) {
                buffer.append("((");
                for (Iterator j = parentVals.iterator(); j.hasNext();) {
                    buffer.append(j.next().toString());
                    if (j.hasNext()) buffer.append(" ");
                }
                buffer.append(") ");
                BBNDiscreteValue dval = (BBNDiscreteValue) curNode.getValues();
                String curNodeName = curNode.getLabel();
                for (Iterator j = dval.iterator(); j.hasNext();) {
                    curInst.put(curNodeName, j.next().toString());
                    buffer.append(curNode.query(curInst));
                    if (j.hasNext()) buffer.append(" ");
                }
                buffer.append(")" + ln);
            } else {
                saveCPT(parents, curNode, curInst, parentVals, buffer);
            }
            parentVals.removeLast();
        }
        curInst.remove(parentName);
        parents.addFirst(parent);
        return buffer.toString();
    }

    public void initialize() {
    }

    /**
     * This is to reset cache. Not used here.
     */
    protected void resetCache() {
    }

    public static void help() {
        System.out.println("LibB Parser:  Usage is one of:");
        System.out.println("         java LibBParser < inputfile");
        System.out.println("OR");
        System.out.println("         java LibBParser inputfile");
    }

    public static void main(String[] args) {
        if (args.length > 1) {
            help();
            return;
        }
        try {
            if (args.length == 0) {
                System.out.println("LibB Parser:  Reading from standard input");
                new LibBParser().load(System.in);
            } else if (args.length == 1) {
                System.out.println("LibB Parser:  Reading from file " + args[0]);
                new LibBParser().load(new FileInputStream(args[0]));
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
            System.out.println("Error!");
        }
    }

    /**
     * ******************************************
     * THE LibB NET LANGUAGE GRAMMAR STARTS HERE *
     * *******************************************
     */
    final public BBNGraph CompilationUnit() throws ParseException {
        Token t = null;
        if (jj_2_1(2)) {
            jj_consume_token(LPAREN);
            jj_consume_token(NETWORK);
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case 71:
                    jj_consume_token(71);
                    break;
                default:
                    jj_la1[0] = jj_gen;
                    ;
            }
            t = jj_consume_token(IDENTIFIER);
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case 71:
                    jj_consume_token(71);
                    break;
                default:
                    jj_la1[1] = jj_gen;
                    ;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case COLON:
                    jj_consume_token(COLON);
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case PROBABILITY:
                            jj_consume_token(PROBABILITY);
                            break;
                        default:
                            jj_la1[2] = jj_gen;
                            ;
                    }
                    break;
                default:
                    jj_la1[3] = jj_gen;
                    ;
            }
            jj_consume_token(RPAREN);
        } else {
            ;
        }
        graph = new BBNGraph();
        if (t != null) graph.setName(t.image);
        Nodes();
        Edges();
        {
            if (true) return graph;
        }
        throw new Error("Missing return statement in function");
    }

    final public void Nodes() throws ParseException {
        Token t = null;
        List values;
        label_1:
        while (true) {
            jj_consume_token(LPAREN);
            jj_consume_token(VAR);
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case 71:
                    jj_consume_token(71);
                    break;
                default:
                    jj_la1[4] = jj_gen;
                    ;
            }
            t = jj_consume_token(IDENTIFIER);
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case 71:
                    jj_consume_token(71);
                    break;
                default:
                    jj_la1[5] = jj_gen;
                    ;
            }
            values = StringList();
            jj_consume_token(RPAREN);
            assert (values.size() > 0);
            BBNNode node = new BBNNode();
            node.setName(t.image);
            node.setLabel(t.image);
            node.setValues(new BBNDiscreteValue(values));
            graph.add(node);
            if (jj_2_2(2)) {
                ;
            } else {
                break label_1;
            }
        }
    }

    final public void Edges() throws ParseException {
        Token t;
        List parentList;
        List cptEntries;
        label_2:
        while (true) {
            jj_consume_token(LPAREN);
            jj_consume_token(PARENTS);
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case 71:
                    jj_consume_token(71);
                    break;
                default:
                    jj_la1[6] = jj_gen;
                    ;
            }
            t = jj_consume_token(IDENTIFIER);
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case 71:
                    jj_consume_token(71);
                    break;
                default:
                    jj_la1[7] = jj_gen;
                    ;
            }
            parentList = StringList();
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case 71:
                    jj_consume_token(71);
                    break;
                default:
                    jj_la1[8] = jj_gen;
                    ;
            }
            cptEntries = CPTEntries();
            jj_consume_token(RPAREN);
            String nodeName = t.image;
            BBNNode node = (BBNNode) graph.getNode(nodeName);
            BBNDiscreteValue dval = (BBNDiscreteValue) node.getValues();
            assert(node != null);
            LinkedList parents = new LinkedList();
            for (Iterator i = parentList.iterator(); i.hasNext();) {
                String parentName = (String) i.next();
                BBNNode parent = (BBNNode) graph.getNode(parentName);
                parents.add(parent);
                graph.addEdge(parent, node);
            }

            for (Iterator i = cptEntries.iterator(); i.hasNext();) {
                List ll = (List) i.next();
                List parentValues = (List) ll.get(0);
                List cptValues = (List) ll.get(1);
                assert (cptValues.size() == dval.size());
                assert (parentValues.size() == parents.size());
                Hashtable curInst = new Hashtable();
                for (Iterator j = parents.iterator(), k = parentValues.iterator(); j.hasNext();) {
                    BBNNode parent = (BBNNode) j.next();
                    String parentValue = (String) k.next();
                    BBNDiscreteValue pdval = (BBNDiscreteValue) parent.getValues();
                    if (!pdval.contains(parentValue)) {
                        {
                            if (true) throw new RuntimeException("Illegal value for parent " + parent);
                        }
                    }
                    curInst.put(parent.getLabel(), parentValue);
                }
                for (Iterator j = dval.iterator(), k = cptValues.iterator(); j.hasNext();) {
                    String value = (String) j.next();
                    double cptValue = ((Double) k.next()).doubleValue();
                    curInst.put(nodeName, value);
                    node.putCPFValue((Hashtable) curInst.clone(), new BBNConstant(cptValue));
                }
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case LPAREN:
                    ;
                    break;
                default:
                    jj_la1[9] = jj_gen;
                    break label_2;
            }
        }
    }

    final public List StringList() throws ParseException {
        LinkedList ll = new LinkedList();
        Token t = null;
        jj_consume_token(LPAREN);
        label_3:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case IDENTIFIER:
                    ;
                    break;
                default:
                    jj_la1[10] = jj_gen;
                    break label_3;
            }
            t = jj_consume_token(IDENTIFIER);
            ll.add(t.image);
        }
        jj_consume_token(RPAREN);
        {
            if (true) return ll;
        }
        throw new Error("Missing return statement in function");
    }

    final public LinkedList CPTEntries() throws ParseException {
        LinkedList list = new LinkedList();
        List values = new LinkedList();
        LinkedList entries = new LinkedList();
        Double number;
        jj_consume_token(LPAREN);
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case LPAREN:
                label_4:
                while (true) {
                    jj_consume_token(LPAREN);
                    values = StringList();
                    label_5:
                    while (true) {
                        number = NumberLiteral();
                        entries.add(number);
                        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                            case INTEGER_LITERAL:
                            case FLOATING_POINT_LITERAL:
                            case MINUS:
                                ;
                                break;
                            default:
                                jj_la1[11] = jj_gen;
                                break label_5;
                        }
                    }
                    jj_consume_token(RPAREN);
                    LinkedList temp = new LinkedList();
                    temp.add(values);
                    temp.add(entries);
                    list.add(temp);
                    values = new LinkedList();
                    entries = new LinkedList();
                    if (jj_2_3(3)) {
                        ;
                    } else {
                        break label_4;
                    }
                }
                break;
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case MINUS:
                label_6:
                while (true) {
                    number = NumberLiteral();
                    entries.add(number);
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case INTEGER_LITERAL:
                        case FLOATING_POINT_LITERAL:
                        case MINUS:
                            ;
                            break;
                        default:
                            jj_la1[12] = jj_gen;
                            break label_6;
                    }
                }
                LinkedList temp = new LinkedList();
                temp.add(values);
                temp.add(entries);
                list.add(temp);
                break;
            default:
                jj_la1[13] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        jj_consume_token(RPAREN);
        {
            if (true) return list;
        }
        throw new Error("Missing return statement in function");
    }

    final public Double NumberLiteral() throws ParseException {
        Token t;
        int sgn = 1;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case MINUS:
                jj_consume_token(MINUS);
                sgn = -1;
                break;
            default:
                jj_la1[14] = jj_gen;
                ;
        }
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case FLOATING_POINT_LITERAL:
                t = jj_consume_token(FLOATING_POINT_LITERAL);
                break;
            case INTEGER_LITERAL:
                t = jj_consume_token(INTEGER_LITERAL);
                break;
            default:
                jj_la1[15] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        {
            if (true) return new Double(sgn * Double.parseDouble(t.image));
        }
        throw new Error("Missing return statement in function");
    }

    final private boolean jj_2_1(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        boolean retval = !jj_3_1();
        jj_save(0, xla);
        return retval;
    }

    final private boolean jj_2_2(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        boolean retval = !jj_3_2();
        jj_save(1, xla);
        return retval;
    }

    final private boolean jj_2_3(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        boolean retval = !jj_3_3();
        jj_save(2, xla);
        return retval;
    }

    final private boolean jj_3_1() {
        if (jj_scan_token(LPAREN)) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
        if (jj_scan_token(NETWORK)) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
        return false;
    }

    final private boolean jj_3R_7() {
        if (jj_scan_token(LPAREN)) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_8()) {
                jj_scanpos = xsp;
                break;
            }
            if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
        }
        if (jj_scan_token(RPAREN)) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
        return false;
    }

    final private boolean jj_3_2() {
        if (jj_scan_token(LPAREN)) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
        if (jj_scan_token(VAR)) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
        return false;
    }

    final private boolean jj_3R_8() {
        if (jj_scan_token(IDENTIFIER)) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
        return false;
    }

    final private boolean jj_3_3() {
        if (jj_scan_token(LPAREN)) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
        if (jj_3R_7()) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
        return false;
    }

    public LibBParserTokenManager token_source;
    JavaCharStream jj_input_stream;
    public Token token, jj_nt;
    private int jj_ntk;
    private Token jj_scanpos, jj_lastpos;
    private int jj_la;
    public boolean lookingAhead = false;
    private boolean jj_semLA;
    private int jj_gen;
    final private int[] jj_la1 = new int[16];
    final private int[] jj_la1_0 = {0x0, 0x0, 0x1000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x800000, 0x100000, 0x22000, 0x22000, 0x822000, 0x0, 0x22000, };
    final private int[] jj_la1_1 = {0x0, 0x0, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20000, 0x20000, 0x20000, 0x20000, 0x0, };
    final private int[] jj_la1_2 = {0x80, 0x80, 0x0, 0x0, 0x80, 0x80, 0x80, 0x80, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, };
    final private JJCalls[] jj_2_rtns = new JJCalls[3];
    private boolean jj_rescan = false;
    private int jj_gc = 0;

    public LibBParser(java.io.InputStream stream) {
        jj_input_stream = new JavaCharStream(stream, 1, 1);
        token_source = new LibBParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 16; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    public void ReInit(java.io.InputStream stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 16; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    public LibBParser(java.io.Reader stream) {
        jj_input_stream = new JavaCharStream(stream, 1, 1);
        token_source = new LibBParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 16; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 16; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    public LibBParser(LibBParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 16; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    public void ReInit(LibBParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 16; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    final private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null)
            token = token.next;
        else
            token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            if (++jj_gc > 100) {
                jj_gc = 0;
                for (int i = 0; i < jj_2_rtns.length; i++) {
                    JJCalls c = jj_2_rtns[i];
                    while (c != null) {
                        if (c.gen < jj_gen) c.first = null;
                        c = c.next;
                    }
                }
            }
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    final private boolean jj_scan_token(int kind) {
        if (jj_scanpos == jj_lastpos) {
            jj_la--;
            if (jj_scanpos.next == null) {
                jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
            } else {
                jj_lastpos = jj_scanpos = jj_scanpos.next;
            }
        } else {
            jj_scanpos = jj_scanpos.next;
        }
        if (jj_rescan) {
            int i = 0;
            Token tok = token;
            while (tok != null && tok != jj_scanpos) {
                i++;
                tok = tok.next;
            }
            if (tok != null) jj_add_error_token(kind, i);
        }
        return (jj_scanpos.kind != kind);
    }

    final public Token getNextToken() {
        if (token.next != null)
            token = token.next;
        else
            token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    final public Token getToken(int index) {
        Token t = lookingAhead ? jj_scanpos : token;
        for (int i = 0; i < index; i++) {
            if (t.next != null)
                t = t.next;
            else
                t = t.next = token_source.getNextToken();
        }
        return t;
    }

    final private int jj_ntk() {
        if ((jj_nt = token.next) == null)
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        else
            return (jj_ntk = jj_nt.kind);
    }

    private java.util.Vector jj_expentries = new java.util.Vector();
    private int[] jj_expentry;
    private int jj_kind = -1;
    private int[] jj_lasttokens = new int[100];
    private int jj_endpos;

    private void jj_add_error_token(int kind, int pos) {
        if (pos >= 100) return;
        if (pos == jj_endpos + 1) {
            jj_lasttokens[jj_endpos++] = kind;
        } else if (jj_endpos != 0) {
            jj_expentry = new int[jj_endpos];
            for (int i = 0; i < jj_endpos; i++) {
                jj_expentry[i] = jj_lasttokens[i];
            }
            boolean exists = false;
            for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
                int[] oldentry = (int[]) (e.nextElement());
                if (oldentry.length == jj_expentry.length) {
                    exists = true;
                    for (int i = 0; i < jj_expentry.length; i++) {
                        if (oldentry[i] != jj_expentry[i]) {
                            exists = false;
                            break;
                        }
                    }
                    if (exists) break;
                }
            }
            if (!exists) jj_expentries.addElement(jj_expentry);
            if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
        }
    }

    final public ParseException generateParseException() {
        jj_expentries.removeAllElements();
        boolean[] la1tokens = new boolean[72];
        for (int i = 0; i < 72; i++) {
            la1tokens[i] = false;
        }
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 16; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & (1 << j)) != 0) {
                        la1tokens[32 + j] = true;
                    }
                    if ((jj_la1_2[i] & (1 << j)) != 0) {
                        la1tokens[64 + j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 72; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.addElement(jj_expentry);
            }
        }
        jj_endpos = 0;
        jj_rescan_token();
        jj_add_error_token(0, 0);
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = (int[]) jj_expentries.elementAt(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    final public void enable_tracing() {
    }

    final public void disable_tracing() {
    }

    final private void jj_rescan_token() {
        jj_rescan = true;
        for (int i = 0; i < 3; i++) {
            JJCalls p = jj_2_rtns[i];
            do {
                if (p.gen > jj_gen) {
                    jj_la = p.arg;
                    jj_lastpos = jj_scanpos = p.first;
                    switch (i) {
                        case 0:
                            jj_3_1();
                            break;
                        case 1:
                            jj_3_2();
                            break;
                        case 2:
                            jj_3_3();
                            break;
                    }
                }
                p = p.next;
            } while (p != null);
        }
        jj_rescan = false;
    }

    final private void jj_save(int index, int xla) {
        JJCalls p = jj_2_rtns[index];
        while (p.gen > jj_gen) {
            if (p.next == null) {
                p = p.next = new JJCalls();
                break;
            }
            p = p.next;
        }
        p.gen = jj_gen + xla - jj_la;
        p.first = token;
        p.arg = xla;
    }

    static final class JJCalls {
        int gen;
        Token first;
        int arg;
        JJCalls next;
    }

}
