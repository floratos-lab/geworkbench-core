/* Generated By:JJTree&JavaCC: Do not edit this line. BifParserTokenManager.java */
package edu.ksu.cis.bnj.bbn.converter.bif;

/*
 * 
 * This file is part of Bayesian Network for Java (BNJ).
 *
 * BNJ is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * BNJ is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with BNJ in LICENSE.txt file; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * 
 */

import edu.ksu.cis.kdd.util.parser.TokenMgrError;

public class BifParserTokenManager implements BifParserConstants {
    public java.io.PrintStream debugStream = System.out;

    public void setDebugStream(java.io.PrintStream ds) {
        debugStream = ds;
    }

    private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1) {
        switch (pos) {
            case 0:
                if ((active1 & 0x40000L) != 0L) {
                    jjmatchedKind = 37;
                    return 54;
                }
                if ((active0 & 0x208000000000000L) != 0L || (active1 & 0x80100L) != 0L)
                    return 26;
                if ((active0 & 0x1000000000000L) != 0L)
                    return 4;
                if ((active0 & 0x7ff800L) != 0L) {
                    jjmatchedKind = 37;
                    return 18;
                }
                if ((active0 & 0x404000000000000L) != 0L || (active1 & 0x300600L) != 0L)
                    return 32;
                if ((active0 & 0xf0000000000000c0L) != 0L || (active1 & 0x43f8ffL) != 0L)
                    return 20;
                return -1;
            case 1:
                if ((active1 & 0x300600L) != 0L)
                    return 33;
                if ((active0 & 0x7ff800L) != 0L) {
                    if (jjmatchedPos != 1) {
                        jjmatchedKind = 37;
                        jjmatchedPos = 1;
                    }
                    return 18;
                }
                if ((active1 & 0x80100L) != 0L)
                    return 20;
                return -1;
            case 2:
                if ((active0 & 0x7ff800L) != 0L) {
                    if (jjmatchedPos != 2) {
                        jjmatchedKind = 37;
                        jjmatchedPos = 2;
                    }
                    return 18;
                }
                if ((active1 & 0x200400L) != 0L)
                    return 20;
                return -1;
            case 3:
                if ((active0 & 0x7fd800L) != 0L) {
                    jjmatchedKind = 37;
                    jjmatchedPos = 3;
                    return 18;
                }
                if ((active0 & 0x2000L) != 0L)
                    return 18;
                return -1;
            case 4:
                if ((active0 & 0x10000L) != 0L)
                    return 18;
                if ((active0 & 0x7ed800L) != 0L) {
                    jjmatchedKind = 37;
                    jjmatchedPos = 4;
                    return 18;
                }
                return -1;
            case 5:
                if ((active0 & 0x7ad800L) != 0L) {
                    jjmatchedKind = 37;
                    jjmatchedPos = 5;
                    return 18;
                }
                if ((active0 & 0x40000L) != 0L)
                    return 18;
                return -1;
            case 6:
                if ((active0 & 0x58d000L) != 0L) {
                    jjmatchedKind = 37;
                    jjmatchedPos = 6;
                    return 18;
                }
                if ((active0 & 0x220800L) != 0L)
                    return 18;
                return -1;
            case 7:
                if ((active0 & 0x485000L) != 0L)
                    return 18;
                if ((active0 & 0x108000L) != 0L) {
                    jjmatchedKind = 37;
                    jjmatchedPos = 7;
                    return 18;
                }
                return -1;
            case 8:
                if ((active0 & 0x108000L) != 0L) {
                    jjmatchedKind = 37;
                    jjmatchedPos = 8;
                    return 18;
                }
                return -1;
            case 9:
                if ((active0 & 0x8000L) != 0L) {
                    jjmatchedKind = 37;
                    jjmatchedPos = 9;
                    return 18;
                }
                if ((active0 & 0x100000L) != 0L)
                    return 18;
                return -1;
            default :
                return -1;
        }
    }

    private final int jjStartNfa_0(int pos, long active0, long active1) {
        return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
    }

    private final int jjStopAtPos(int pos, int kind) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        return pos + 1;
    }

    private final int jjStartNfaWithStates_0(int pos, int kind, int state) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_0(state, pos + 1);
    }

    private final int jjMoveStringLiteralDfa0_0() {
        switch (curChar) {
            case 9:
                return jjStopAtPos(0, 2);
            case 10:
                return jjStopAtPos(0, 3);
            case 12:
                return jjStopAtPos(0, 5);
            case 13:
                return jjStopAtPos(0, 4);
            case 32:
                return jjStopAtPos(0, 1);
            case 33:
                jjmatchedKind = 52;
                return jjMoveStringLiteralDfa1_0(0x800000000000000L, 0x0L);
            case 37:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x40000L);
            case 38:
                jjmatchedKind = 69;
                return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x8000L);
            case 39:
                return jjStopAtPos(0, 29);
            case 40:
                return jjStopAtPos(0, 40);
            case 41:
                return jjStopAtPos(0, 41);
            case 42:
                jjmatchedKind = 67;
                return jjMoveStringLiteralDfa1_0(0x0L, 0x2000L);
            case 43:
                jjmatchedKind = 65;
                return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x800L);
            case 44:
                return jjStopAtPos(0, 47);
            case 45:
                jjmatchedKind = 66;
                return jjMoveStringLiteralDfa1_0(0x0L, 0x401001L);
            case 46:
                return jjStartNfaWithStates_0(0, 48, 4);
            case 47:
                jjmatchedKind = 68;
                return jjMoveStringLiteralDfa1_0(0xc0L, 0x4000L);
            case 58:
                return jjStopAtPos(0, 55);
            case 59:
                return jjStopAtPos(0, 46);
            case 60:
                jjmatchedKind = 51;
                return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x80100L);
            case 61:
                jjmatchedKind = 49;
                return jjMoveStringLiteralDfa1_0(0x100000000000000L, 0x0L);
            case 62:
                jjmatchedKind = 50;
                return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x300600L);
            case 63:
                return jjStopAtPos(0, 54);
            case 91:
                return jjStopAtPos(0, 44);
            case 93:
                return jjStopAtPos(0, 45);
            case 94:
                jjmatchedKind = 71;
                return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x20000L);
            case 99:
                return jjMoveStringLiteralDfa1_0(0x100000L, 0x0L);
            case 100:
                return jjMoveStringLiteralDfa1_0(0x4a0000L, 0x0L);
            case 110:
                return jjMoveStringLiteralDfa1_0(0x40800L, 0x0L);
            case 112:
                return jjMoveStringLiteralDfa1_0(0xc000L, 0x0L);
            case 116:
                return jjMoveStringLiteralDfa1_0(0x12000L, 0x0L);
            case 117:
                return jjMoveStringLiteralDfa1_0(0x200000L, 0x0L);
            case 118:
                return jjMoveStringLiteralDfa1_0(0x1000L, 0x0L);
            case 123:
                return jjStopAtPos(0, 42);
            case 124:
                jjmatchedKind = 70;
                return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x10000L);
            case 125:
                return jjStopAtPos(0, 43);
            case 126:
                return jjStopAtPos(0, 53);
            default :
                return jjMoveNfa_0(0, 0);
        }
    }

    private final int jjMoveStringLiteralDfa1_0(long active0, long active1) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(0, active0, active1);
            return 1;
        }
        switch (curChar) {
            case 38:
                if ((active0 & 0x2000000000000000L) != 0L)
                    return jjStopAtPos(1, 61);
                break;
            case 42:
                if ((active0 & 0x80L) != 0L)
                    return jjStopAtPos(1, 7);
                break;
            case 43:
                if ((active0 & 0x8000000000000000L) != 0L)
                    return jjStopAtPos(1, 63);
                break;
            case 45:
                if ((active1 & 0x1L) != 0L)
                    return jjStopAtPos(1, 64);
                break;
            case 47:
                if ((active0 & 0x40L) != 0L)
                    return jjStopAtPos(1, 6);
                break;
            case 60:
                if ((active1 & 0x100L) != 0L) {
                    jjmatchedKind = 72;
                    jjmatchedPos = 1;
                }
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000L);
            case 61:
                if ((active0 & 0x100000000000000L) != 0L)
                    return jjStopAtPos(1, 56);
                else if ((active0 & 0x200000000000000L) != 0L)
                    return jjStopAtPos(1, 57);
                else if ((active0 & 0x400000000000000L) != 0L)
                    return jjStopAtPos(1, 58);
                else if ((active0 & 0x800000000000000L) != 0L)
                    return jjStopAtPos(1, 59);
                else if ((active1 & 0x800L) != 0L)
                    return jjStopAtPos(1, 75);
                else if ((active1 & 0x1000L) != 0L)
                    return jjStopAtPos(1, 76);
                else if ((active1 & 0x2000L) != 0L)
                    return jjStopAtPos(1, 77);
                else if ((active1 & 0x4000L) != 0L)
                    return jjStopAtPos(1, 78);
                else if ((active1 & 0x8000L) != 0L)
                    return jjStopAtPos(1, 79);
                else if ((active1 & 0x10000L) != 0L)
                    return jjStopAtPos(1, 80);
                else if ((active1 & 0x20000L) != 0L)
                    return jjStopAtPos(1, 81);
                else if ((active1 & 0x40000L) != 0L)
                    return jjStopAtPos(1, 82);
                break;
            case 62:
                if ((active1 & 0x200L) != 0L) {
                    jjmatchedKind = 73;
                    jjmatchedPos = 1;
                } else if ((active1 & 0x400000L) != 0L)
                    return jjStopAtPos(1, 86);
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x300400L);
            case 94:
                if ((active0 & 0x4000000000000000L) != 0L)
                    return jjStopAtPos(1, 62);
                break;
            case 97:
                return jjMoveStringLiteralDfa2_0(active0, 0x11000L, active1, 0L);
            case 101:
                return jjMoveStringLiteralDfa2_0(active0, 0x420800L, active1, 0L);
            case 105:
                return jjMoveStringLiteralDfa2_0(active0, 0x80000L, active1, 0L);
            case 111:
                return jjMoveStringLiteralDfa2_0(active0, 0x140000L, active1, 0L);
            case 114:
                return jjMoveStringLiteralDfa2_0(active0, 0xc000L, active1, 0L);
            case 116:
                return jjMoveStringLiteralDfa2_0(active0, 0x200000L, active1, 0L);
            case 121:
                return jjMoveStringLiteralDfa2_0(active0, 0x2000L, active1, 0L);
            case 124:
                if ((active0 & 0x1000000000000000L) != 0L)
                    return jjStopAtPos(1, 60);
                break;
            default :
                break;
        }
        return jjStartNfa_0(0, active0, active1);
    }

    private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_0(0, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(1, active0, active1);
            return 2;
        }
        switch (curChar) {
            case 61:
                if ((active1 & 0x80000L) != 0L)
                    return jjStopAtPos(2, 83);
                else if ((active1 & 0x100000L) != 0L)
                    return jjStopAtPos(2, 84);
                break;
            case 62:
                if ((active1 & 0x400L) != 0L) {
                    jjmatchedKind = 74;
                    jjmatchedPos = 2;
                }
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000L);
            case 98:
                return jjMoveStringLiteralDfa3_0(active0, 0x10000L, active1, 0L);
            case 99:
                return jjMoveStringLiteralDfa3_0(active0, 0x400000L, active1, 0L);
            case 102:
                return jjMoveStringLiteralDfa3_0(active0, 0x20000L, active1, 0L);
            case 105:
                return jjMoveStringLiteralDfa3_0(active0, 0x200000L, active1, 0L);
            case 110:
                return jjMoveStringLiteralDfa3_0(active0, 0x100000L, active1, 0L);
            case 111:
                return jjMoveStringLiteralDfa3_0(active0, 0xc000L, active1, 0L);
            case 112:
                return jjMoveStringLiteralDfa3_0(active0, 0x2000L, active1, 0L);
            case 114:
                return jjMoveStringLiteralDfa3_0(active0, 0x41000L, active1, 0L);
            case 115:
                return jjMoveStringLiteralDfa3_0(active0, 0x80000L, active1, 0L);
            case 116:
                return jjMoveStringLiteralDfa3_0(active0, 0x800L, active1, 0L);
            default :
                break;
        }
        return jjStartNfa_0(1, active0, active1);
    }

    private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_0(1, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(2, active0, active1);
            return 3;
        }
        switch (curChar) {
            case 61:
                if ((active1 & 0x200000L) != 0L)
                    return jjStopAtPos(3, 85);
                break;
            case 97:
                return jjMoveStringLiteralDfa4_0(active0, 0x20000L, active1, 0L);
            case 98:
                return jjMoveStringLiteralDfa4_0(active0, 0x8000L, active1, 0L);
            case 99:
                return jjMoveStringLiteralDfa4_0(active0, 0x80000L, active1, 0L);
            case 101:
                if ((active0 & 0x2000L) != 0L)
                    return jjStartNfaWithStates_0(3, 13, 18);
                break;
            case 105:
                return jjMoveStringLiteralDfa4_0(active0, 0x401000L, active1, 0L);
            case 108:
                return jjMoveStringLiteralDfa4_0(active0, 0x210000L, active1, 0L);
            case 109:
                return jjMoveStringLiteralDfa4_0(active0, 0x40000L, active1, 0L);
            case 112:
                return jjMoveStringLiteralDfa4_0(active0, 0x4000L, active1, 0L);
            case 116:
                return jjMoveStringLiteralDfa4_0(active0, 0x100000L, active1, 0L);
            case 119:
                return jjMoveStringLiteralDfa4_0(active0, 0x800L, active1, 0L);
            default :
                break;
        }
        return jjStartNfa_0(2, active0, active1);
    }

    private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_0(2, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(3, active0, 0L);
            return 4;
        }
        switch (curChar) {
            case 97:
                return jjMoveStringLiteralDfa5_0(active0, 0x49000L);
            case 101:
                if ((active0 & 0x10000L) != 0L)
                    return jjStartNfaWithStates_0(4, 16, 18);
                return jjMoveStringLiteralDfa5_0(active0, 0x4000L);
            case 105:
                return jjMoveStringLiteralDfa5_0(active0, 0x300000L);
            case 111:
                return jjMoveStringLiteralDfa5_0(active0, 0x800L);
            case 114:
                return jjMoveStringLiteralDfa5_0(active0, 0x80000L);
            case 115:
                return jjMoveStringLiteralDfa5_0(active0, 0x400000L);
            case 117:
                return jjMoveStringLiteralDfa5_0(active0, 0x20000L);
            default :
                break;
        }
        return jjStartNfa_0(3, active0, 0L);
    }

    private final int jjMoveStringLiteralDfa5_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(3, old0, 0L);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(4, active0, 0L);
            return 5;
        }
        switch (curChar) {
            case 98:
                return jjMoveStringLiteralDfa6_0(active0, 0x9000L);
            case 101:
                return jjMoveStringLiteralDfa6_0(active0, 0x80000L);
            case 105:
                return jjMoveStringLiteralDfa6_0(active0, 0x400000L);
            case 108:
                if ((active0 & 0x40000L) != 0L)
                    return jjStartNfaWithStates_0(5, 18, 18);
                return jjMoveStringLiteralDfa6_0(active0, 0x20000L);
            case 110:
                return jjMoveStringLiteralDfa6_0(active0, 0x100000L);
            case 114:
                return jjMoveStringLiteralDfa6_0(active0, 0x4800L);
            case 116:
                return jjMoveStringLiteralDfa6_0(active0, 0x200000L);
            default :
                break;
        }
        return jjStartNfa_0(4, active0, 0L);
    }

    private final int jjMoveStringLiteralDfa6_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(4, old0, 0L);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(5, active0, 0L);
            return 6;
        }
        switch (curChar) {
            case 105:
                return jjMoveStringLiteralDfa7_0(active0, 0x8000L);
            case 107:
                if ((active0 & 0x800L) != 0L)
                    return jjStartNfaWithStates_0(6, 11, 18);
                break;
            case 108:
                return jjMoveStringLiteralDfa7_0(active0, 0x1000L);
            case 111:
                return jjMoveStringLiteralDfa7_0(active0, 0x400000L);
            case 116:
                if ((active0 & 0x20000L) != 0L)
                    return jjStartNfaWithStates_0(6, 17, 18);
                return jjMoveStringLiteralDfa7_0(active0, 0x84000L);
            case 117:
                return jjMoveStringLiteralDfa7_0(active0, 0x100000L);
            case 121:
                if ((active0 & 0x200000L) != 0L)
                    return jjStartNfaWithStates_0(6, 21, 18);
                break;
            default :
                break;
        }
        return jjStartNfa_0(5, active0, 0L);
    }

    private final int jjMoveStringLiteralDfa7_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(5, old0, 0L);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(6, active0, 0L);
            return 7;
        }
        switch (curChar) {
            case 101:
                if ((active0 & 0x1000L) != 0L)
                    return jjStartNfaWithStates_0(7, 12, 18);
                else if ((active0 & 0x80000L) != 0L)
                    return jjStartNfaWithStates_0(7, 19, 18);
                break;
            case 108:
                return jjMoveStringLiteralDfa8_0(active0, 0x8000L);
            case 110:
                if ((active0 & 0x400000L) != 0L)
                    return jjStartNfaWithStates_0(7, 22, 18);
                break;
            case 111:
                return jjMoveStringLiteralDfa8_0(active0, 0x100000L);
            case 121:
                if ((active0 & 0x4000L) != 0L)
                    return jjStartNfaWithStates_0(7, 14, 18);
                break;
            default :
                break;
        }
        return jjStartNfa_0(6, active0, 0L);
    }

    private final int jjMoveStringLiteralDfa8_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(6, old0, 0L);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(7, active0, 0L);
            return 8;
        }
        switch (curChar) {
            case 105:
                return jjMoveStringLiteralDfa9_0(active0, 0x8000L);
            case 117:
                return jjMoveStringLiteralDfa9_0(active0, 0x100000L);
            default :
                break;
        }
        return jjStartNfa_0(7, active0, 0L);
    }

    private final int jjMoveStringLiteralDfa9_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(7, old0, 0L);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(8, active0, 0L);
            return 9;
        }
        switch (curChar) {
            case 115:
                if ((active0 & 0x100000L) != 0L)
                    return jjStartNfaWithStates_0(9, 20, 18);
                break;
            case 116:
                return jjMoveStringLiteralDfa10_0(active0, 0x8000L);
            default :
                break;
        }
        return jjStartNfa_0(8, active0, 0L);
    }

    private final int jjMoveStringLiteralDfa10_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(8, old0, 0L);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(9, active0, 0L);
            return 10;
        }
        switch (curChar) {
            case 121:
                if ((active0 & 0x8000L) != 0L)
                    return jjStartNfaWithStates_0(10, 15, 18);
                break;
            default :
                break;
        }
        return jjStartNfa_0(9, active0, 0L);
    }

    private final void jjCheckNAdd(int state) {
        if (jjrounds[state] != jjround) {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state] = jjround;
        }
    }

    private final void jjAddStates(int start, int end) {
        do {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
        } while (start++ != end);
    }

    private final void jjCheckNAddTwoStates(int state1, int state2) {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }

    private final void jjCheckNAddStates(int start, int end) {
        do {
            jjCheckNAdd(jjnextStates[start]);
        } while (start++ != end);
    }

    private final void jjCheckNAddStates(int start) {
        jjCheckNAdd(jjnextStates[start]);
        jjCheckNAdd(jjnextStates[start + 1]);
    }

    static final long[] jjbitVec0 = {0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL};
    static final long[] jjbitVec2 = {0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL};
    static final long[] jjbitVec3 = {0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L};
    static final long[] jjbitVec4 = {0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL};
    static final long[] jjbitVec5 = {0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL};
    static final long[] jjbitVec6 = {0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L};
    static final long[] jjbitVec7 = {0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L};
    static final long[] jjbitVec8 = {0x3fffffffffffL, 0x0L, 0x0L, 0x0L};

    private final int jjMoveNfa_0(int startState, int curPos) {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 54;
        int i = 1;
        jjstateSet[0] = startState;
        int j, kind = 0x7fffffff;
        for (; ;) {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 33:
                            if (curChar == 62)
                                jjCheckNAdd(20);
                            else if (curChar == 61) {
                                if (kind > 87)
                                    kind = 87;
                            }
                            break;
                        case 32:
                            if (curChar == 62)
                                jjstateSet[jjnewStateCnt++] = 33;
                            if (curChar == 62)
                                jjCheckNAdd(20);
                            break;
                        case 0:
                            if ((0x3ff003000000000L & l) != 0L) {
                                if (kind > 37)
                                    kind = 37;
                                jjCheckNAdd(18);
                            } else if (curChar == 62)
                                jjAddStates(0, 1);
                            else if (curChar == 38)
                                jjCheckNAdd(20);
                            else if (curChar == 60)
                                jjstateSet[jjnewStateCnt++] = 26;
                            else if (curChar == 45)
                                jjCheckNAdd(20);
                            else if (curChar == 43)
                                jjCheckNAdd(20);
                            else if (curChar == 47)
                                jjCheckNAdd(20);
                            else if (curChar == 42)
                                jjCheckNAdd(20);
                            else if (curChar == 61) {
                                if (kind > 87)
                                    kind = 87;
                            } else if (curChar == 34)
                                jjCheckNAddStates(2, 4);
                            else if (curChar == 46)
                                jjCheckNAdd(4);
                            if ((0x3ff000000000000L & l) != 0L)
                                jjCheckNAddStates(5, 11);
                            else if (curChar == 37)
                                jjCheckNAdd(20);
                            if ((0x3fe000000000000L & l) != 0L) {
                                if (kind > 23)
                                    kind = 23;
                                jjCheckNAddTwoStates(1, 2);
                            } else if (curChar == 48) {
                                if (kind > 23)
                                    kind = 23;
                                jjCheckNAddStates(12, 14);
                            }
                            break;
                        case 54:
                            if ((0x3ff003000000000L & l) != 0L) {
                                if (kind > 37)
                                    kind = 37;
                                jjCheckNAdd(18);
                            } else if (curChar == 61) {
                                if (kind > 87)
                                    kind = 87;
                            }
                            break;
                        case 1:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 23)
                                kind = 23;
                            jjCheckNAddTwoStates(1, 2);
                            break;
                        case 3:
                            if (curChar == 46)
                                jjCheckNAdd(4);
                            break;
                        case 4:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 27)
                                kind = 27;
                            jjCheckNAddStates(15, 17);
                            break;
                        case 6:
                            if ((0x280000000000L & l) != 0L)
                                jjCheckNAdd(7);
                            break;
                        case 7:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 27)
                                kind = 27;
                            jjCheckNAddTwoStates(7, 8);
                            break;
                        case 9:
                            if (curChar == 34)
                                jjCheckNAddStates(2, 4);
                            break;
                        case 10:
                            if ((0xfffffffbffffdbffL & l) != 0L)
                                jjCheckNAddStates(2, 4);
                            break;
                        case 12:
                            if ((0x8400000000L & l) != 0L)
                                jjCheckNAddStates(2, 4);
                            break;
                        case 13:
                            if (curChar == 34 && kind > 30)
                                kind = 30;
                            break;
                        case 14:
                            if ((0xff000000000000L & l) != 0L)
                                jjCheckNAddStates(18, 21);
                            break;
                        case 15:
                            if ((0xff000000000000L & l) != 0L)
                                jjCheckNAddStates(2, 4);
                            break;
                        case 16:
                            if ((0xf000000000000L & l) != 0L)
                                jjstateSet[jjnewStateCnt++] = 17;
                            break;
                        case 17:
                            if ((0xff000000000000L & l) != 0L)
                                jjCheckNAdd(15);
                            break;
                        case 18:
                            if ((0x3ff003000000000L & l) == 0L)
                                break;
                            if (kind > 37)
                                kind = 37;
                            jjCheckNAdd(18);
                            break;
                        case 19:
                            if (curChar == 61 && kind > 87)
                                kind = 87;
                            break;
                        case 20:
                            if (curChar == 61 && kind > 87)
                                kind = 87;
                            break;
                        case 21:
                            if (curChar == 42)
                                jjCheckNAdd(20);
                            break;
                        case 22:
                            if (curChar == 47)
                                jjCheckNAdd(20);
                            break;
                        case 23:
                            if (curChar == 37)
                                jjCheckNAdd(20);
                            break;
                        case 24:
                            if (curChar == 43)
                                jjCheckNAdd(20);
                            break;
                        case 25:
                            if (curChar == 45)
                                jjCheckNAdd(20);
                            break;
                        case 26:
                            if (curChar == 60)
                                jjCheckNAdd(20);
                            break;
                        case 27:
                            if (curChar == 60)
                                jjstateSet[jjnewStateCnt++] = 26;
                            break;
                        case 28:
                            if (curChar == 38)
                                jjCheckNAdd(20);
                            break;
                        case 31:
                            if (curChar == 62)
                                jjAddStates(0, 1);
                            break;
                        case 34:
                            if (curChar == 62)
                                jjstateSet[jjnewStateCnt++] = 33;
                            break;
                        case 35:
                            if ((0x3ff000000000000L & l) != 0L)
                                jjCheckNAddStates(5, 11);
                            break;
                        case 36:
                            if ((0x3ff000000000000L & l) != 0L)
                                jjCheckNAddTwoStates(36, 37);
                            break;
                        case 37:
                            if (curChar != 46)
                                break;
                            if (kind > 27)
                                kind = 27;
                            jjCheckNAddStates(22, 24);
                            break;
                        case 38:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 27)
                                kind = 27;
                            jjCheckNAddStates(22, 24);
                            break;
                        case 40:
                            if ((0x280000000000L & l) != 0L)
                                jjCheckNAdd(41);
                            break;
                        case 41:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 27)
                                kind = 27;
                            jjCheckNAddTwoStates(41, 8);
                            break;
                        case 42:
                            if ((0x3ff000000000000L & l) != 0L)
                                jjCheckNAddTwoStates(42, 43);
                            break;
                        case 44:
                            if ((0x280000000000L & l) != 0L)
                                jjCheckNAdd(45);
                            break;
                        case 45:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 27)
                                kind = 27;
                            jjCheckNAddTwoStates(45, 8);
                            break;
                        case 46:
                            if ((0x3ff000000000000L & l) != 0L)
                                jjCheckNAddStates(25, 27);
                            break;
                        case 48:
                            if ((0x280000000000L & l) != 0L)
                                jjCheckNAdd(49);
                            break;
                        case 49:
                            if ((0x3ff000000000000L & l) != 0L)
                                jjCheckNAddTwoStates(49, 8);
                            break;
                        case 50:
                            if (curChar != 48)
                                break;
                            if (kind > 23)
                                kind = 23;
                            jjCheckNAddStates(12, 14);
                            break;
                        case 52:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 23)
                                kind = 23;
                            jjCheckNAddTwoStates(52, 2);
                            break;
                        case 53:
                            if ((0xff000000000000L & l) == 0L)
                                break;
                            if (kind > 23)
                                kind = 23;
                            jjCheckNAddTwoStates(53, 2);
                            break;
                        default :
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 37)
                                    kind = 37;
                                jjCheckNAdd(18);
                            } else if (curChar == 124)
                                jjCheckNAdd(20);
                            else if (curChar == 94)
                                jjCheckNAdd(20);
                            break;
                        case 54:
                        case 18:
                            if ((0x7fffffe87fffffeL & l) == 0L)
                                break;
                            if (kind > 37)
                                kind = 37;
                            jjCheckNAdd(18);
                            break;
                        case 2:
                            if ((0x100000001000L & l) != 0L && kind > 23)
                                kind = 23;
                            break;
                        case 5:
                            if ((0x2000000020L & l) != 0L)
                                jjAddStates(28, 29);
                            break;
                        case 8:
                            if ((0x5000000050L & l) != 0L && kind > 27)
                                kind = 27;
                            break;
                        case 10:
                            if ((0xffffffffefffffffL & l) != 0L)
                                jjCheckNAddStates(2, 4);
                            break;
                        case 11:
                            if (curChar == 92)
                                jjAddStates(30, 32);
                            break;
                        case 12:
                            if ((0x14404410000000L & l) != 0L)
                                jjCheckNAddStates(2, 4);
                            break;
                        case 29:
                            if (curChar == 94)
                                jjCheckNAdd(20);
                            break;
                        case 30:
                            if (curChar == 124)
                                jjCheckNAdd(20);
                            break;
                        case 39:
                            if ((0x2000000020L & l) != 0L)
                                jjAddStates(33, 34);
                            break;
                        case 43:
                            if ((0x2000000020L & l) != 0L)
                                jjAddStates(35, 36);
                            break;
                        case 47:
                            if ((0x2000000020L & l) != 0L)
                                jjAddStates(37, 38);
                            break;
                        case 51:
                            if ((0x100000001000000L & l) != 0L)
                                jjCheckNAdd(52);
                            break;
                        case 52:
                            if ((0x7e0000007eL & l) == 0L)
                                break;
                            if (kind > 23)
                                kind = 23;
                            jjCheckNAddTwoStates(52, 2);
                            break;
                        default :
                            break;
                    }
                } while (i != startsAt);
            } else {
                int hiByte = (int) (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 0:
                        case 18:
                            if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                                break;
                            if (kind > 37)
                                kind = 37;
                            jjCheckNAdd(18);
                            break;
                        case 54:
                            if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                                break;
                            if (kind > 37)
                                kind = 37;
                            jjCheckNAdd(18);
                            break;
                        case 10:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                                jjAddStates(2, 4);
                            break;
                        default :
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 54 - (jjnewStateCnt = startsAt)))
                return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    private final int jjMoveStringLiteralDfa0_5() {
        switch (curChar) {
            case 39:
                return jjStopAtPos(0, 36);
            default :
                return 1;
        }
    }

    private final int jjStopStringLiteralDfa_3(int pos, long active0) {
        switch (pos) {
            default :
                return -1;
        }
    }

    private final int jjStartNfa_3(int pos, long active0) {
        return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0), pos + 1);
    }

    private final int jjStartNfaWithStates_3(int pos, int kind, int state) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_3(state, pos + 1);
    }

    private final int jjMoveStringLiteralDfa0_3() {
        switch (curChar) {
            case 92:
                return jjStopAtPos(0, 31);
            default :
                return jjMoveNfa_3(0, 0);
        }
    }

    private final int jjMoveNfa_3(int startState, int curPos) {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 1;
        int i = 1;
        jjstateSet[0] = startState;
        int j, kind = 0x7fffffff;
        for (; ;) {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((0xffffff7fffffdbffL & l) != 0L)
                                kind = 32;
                            break;
                        default :
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((0xffffffffefffffffL & l) != 0L)
                                kind = 32;
                            break;
                        default :
                            break;
                    }
                } while (i != startsAt);
            } else {
                int hiByte = (int) (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 32)
                                kind = 32;
                            break;
                        default :
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
                return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    private final int jjMoveStringLiteralDfa0_2() {
        switch (curChar) {
            case 42:
                return jjMoveStringLiteralDfa1_2(0x200L);
            default :
                return 1;
        }
    }

    private final int jjMoveStringLiteralDfa1_2(long active0) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return 1;
        }
        switch (curChar) {
            case 47:
                if ((active0 & 0x200L) != 0L)
                    return jjStopAtPos(1, 9);
                break;
            default :
                return 2;
        }
        return 2;
    }

    private final int jjMoveStringLiteralDfa0_1() {
        return jjMoveNfa_1(0, 0);
    }

    private final int jjMoveNfa_1(int startState, int curPos) {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 3;
        int i = 1;
        jjstateSet[0] = startState;
        int j, kind = 0x7fffffff;
        for (; ;) {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((0x2400L & l) != 0L) {
                                if (kind > 8)
                                    kind = 8;
                            }
                            if (curChar == 13)
                                jjstateSet[jjnewStateCnt++] = 1;
                            break;
                        case 1:
                            if (curChar == 10 && kind > 8)
                                kind = 8;
                            break;
                        case 2:
                            if (curChar == 13)
                                jjstateSet[jjnewStateCnt++] = 1;
                            break;
                        default :
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        default :
                            break;
                    }
                } while (i != startsAt);
            } else {
                int hiByte = (int) (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        default :
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
                return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    private final int jjMoveStringLiteralDfa0_4() {
        return jjMoveNfa_4(0, 0);
    }

    private final int jjMoveNfa_4(int startState, int curPos) {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 10;
        int i = 1;
        jjstateSet[0] = startState;
        int j, kind = 0x7fffffff;
        for (; ;) {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((0xff000000000000L & l) != 0L) {
                                if (kind > 34)
                                    kind = 34;
                                jjCheckNAdd(2);
                            } else if ((0x8400000000L & l) != 0L) {
                                if (kind > 33)
                                    kind = 33;
                            }
                            if ((0xf000000000000L & l) != 0L)
                                jjstateSet[jjnewStateCnt++] = 4;
                            break;
                        case 1:
                            if ((0xff000000000000L & l) == 0L)
                                break;
                            if (kind > 34)
                                kind = 34;
                            jjCheckNAdd(2);
                            break;
                        case 2:
                            if ((0xff000000000000L & l) != 0L && kind > 34)
                                kind = 34;
                            break;
                        case 3:
                            if ((0xf000000000000L & l) != 0L)
                                jjstateSet[jjnewStateCnt++] = 4;
                            break;
                        case 4:
                            if ((0xff000000000000L & l) != 0L)
                                jjCheckNAdd(2);
                            break;
                        case 6:
                            if ((0x3ff000000000000L & l) != 0L)
                                jjstateSet[jjnewStateCnt++] = 7;
                            break;
                        case 7:
                            if ((0x3ff000000000000L & l) != 0L)
                                jjstateSet[jjnewStateCnt++] = 8;
                            break;
                        case 8:
                            if ((0x3ff000000000000L & l) != 0L)
                                jjstateSet[jjnewStateCnt++] = 9;
                            break;
                        case 9:
                            if ((0x3ff000000000000L & l) != 0L && kind > 35)
                                kind = 35;
                            break;
                        default :
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((0x14404410000000L & l) != 0L) {
                                if (kind > 33)
                                    kind = 33;
                            } else if (curChar == 117)
                                jjstateSet[jjnewStateCnt++] = 6;
                            break;
                        case 5:
                            if (curChar == 117)
                                jjstateSet[jjnewStateCnt++] = 6;
                            break;
                        case 6:
                            if ((0x7e0000007eL & l) != 0L)
                                jjstateSet[jjnewStateCnt++] = 7;
                            break;
                        case 7:
                            if ((0x7e0000007eL & l) != 0L)
                                jjstateSet[jjnewStateCnt++] = 8;
                            break;
                        case 8:
                            if ((0x7e0000007eL & l) != 0L)
                                jjstateSet[jjnewStateCnt++] = 9;
                            break;
                        case 9:
                            if ((0x7e0000007eL & l) != 0L && kind > 35)
                                kind = 35;
                            break;
                        default :
                            break;
                    }
                } while (i != startsAt);
            } else {
                int hiByte = (int) (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        default :
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 10 - (jjnewStateCnt = startsAt)))
                return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    static final int[] jjnextStates = {32, 34, 10, 11, 13, 36, 37, 42, 43, 46, 47, 8, 51, 53, 2, 4, 5, 8, 10, 11, 15, 13, 38, 39, 8, 46, 47, 8, 6, 7, 12, 14, 16, 40, 41, 44, 45, 48, 49, };

    private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2) {
        switch (hiByte) {
            case 0:
                return ((jjbitVec2[i2] & l2) != 0L);
            default :
                if ((jjbitVec0[i1] & l1) != 0L)
                    return true;
                return false;
        }
    }

    private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2) {
        switch (hiByte) {
            case 0:
                return ((jjbitVec4[i2] & l2) != 0L);
            case 48:
                return ((jjbitVec5[i2] & l2) != 0L);
            case 49:
                return ((jjbitVec6[i2] & l2) != 0L);
            case 51:
                return ((jjbitVec7[i2] & l2) != 0L);
            case 61:
                return ((jjbitVec8[i2] & l2) != 0L);
            default :
                if ((jjbitVec3[i1] & l1) != 0L)
                    return true;
                return false;
        }
    }

    public static final String[] jjstrLiteralImages = {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, };
    public static final String[] lexStateNames = {"DEFAULT", "IN_SINGLE_LINE_COMMENT", "IN_MULTI_LINE_COMMENT", "CHAR_LIT", "ESCAPED_CHAR_LIT", "CHAR_LIT_CLOSE", };
    public static final int[] jjnewLexState = {-1, -1, -1, -1, -1, -1, 1, 2, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 4, 5, 5, 5, 5, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, };
    static final long[] jjtoToken = {0xffffff2068fff801L, 0xffffffL, };
    static final long[] jjtoSkip = {0x33eL, 0x0L, };
    static final long[] jjtoSpecial = {0x33eL, 0x0L, };
    static final long[] jjtoMore = {0x1f800004c0L, 0x0L, };
    private JavaCharStream input_stream;
    private final int[] jjrounds = new int[54];
    private final int[] jjstateSet = new int[108];
    StringBuffer image;
    int jjimageLen;
    int lengthOfMatch;
    protected char curChar;

    public BifParserTokenManager(JavaCharStream stream) {
        if (JavaCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
        input_stream = stream;
    }

    public BifParserTokenManager(JavaCharStream stream, int lexState) {
        this(stream);
        SwitchTo(lexState);
    }

    public void ReInit(JavaCharStream stream) {
        jjmatchedPos = jjnewStateCnt = 0;
        curLexState = defaultLexState;
        input_stream = stream;
        ReInitRounds();
    }

    private final void ReInitRounds() {
        int i;
        jjround = 0x80000001;
        for (i = 54; i-- > 0;)
            jjrounds[i] = 0x80000000;
    }

    public void ReInit(JavaCharStream stream, int lexState) {
        ReInit(stream);
        SwitchTo(lexState);
    }

    public void SwitchTo(int lexState) {
        if (lexState >= 6 || lexState < 0)
            throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
        else
            curLexState = lexState;
    }

    private final Token jjFillToken() {
        Token t = Token.newToken(jjmatchedKind);
        t.kind = jjmatchedKind;
        String im = jjstrLiteralImages[jjmatchedKind];
        t.image = (im == null) ? input_stream.GetImage() : im;
        return t;
    }

    int curLexState = 0;
    int defaultLexState = 0;
    int jjnewStateCnt;
    int jjround;
    int jjmatchedPos;
    int jjmatchedKind;

    public final Token getNextToken() {
        int kind;
        Token specialToken = null;
        Token matchedToken;
        int curPos = 0;

        EOFLoop :
        for (; ;) {
            try {
                curChar = input_stream.BeginToken();
            } catch (java.io.IOException e) {
                jjmatchedKind = 0;
                matchedToken = jjFillToken();
                matchedToken.specialToken = specialToken;
                return matchedToken;
            }
            image = null;
            jjimageLen = 0;

            for (; ;) {
                switch (curLexState) {
                    case 0:
                        jjmatchedKind = 0x7fffffff;
                        jjmatchedPos = 0;
                        curPos = jjMoveStringLiteralDfa0_0();
                        break;
                    case 1:
                        jjmatchedKind = 0x7fffffff;
                        jjmatchedPos = 0;
                        curPos = jjMoveStringLiteralDfa0_1();
                        if (jjmatchedPos == 0 && jjmatchedKind > 10) {
                            jjmatchedKind = 10;
                        }
                        break;
                    case 2:
                        jjmatchedKind = 0x7fffffff;
                        jjmatchedPos = 0;
                        curPos = jjMoveStringLiteralDfa0_2();
                        if (jjmatchedPos == 0 && jjmatchedKind > 10) {
                            jjmatchedKind = 10;
                        }
                        break;
                    case 3:
                        jjmatchedKind = 0x7fffffff;
                        jjmatchedPos = 0;
                        curPos = jjMoveStringLiteralDfa0_3();
                        break;
                    case 4:
                        jjmatchedKind = 0x7fffffff;
                        jjmatchedPos = 0;
                        curPos = jjMoveStringLiteralDfa0_4();
                        break;
                    case 5:
                        jjmatchedKind = 0x7fffffff;
                        jjmatchedPos = 0;
                        curPos = jjMoveStringLiteralDfa0_5();
                        break;
                }
                if (jjmatchedKind != 0x7fffffff) {
                    if (jjmatchedPos + 1 < curPos)
                        input_stream.backup(curPos - jjmatchedPos - 1);
                    if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                        matchedToken = jjFillToken();
                        matchedToken.specialToken = specialToken;
                        if (jjnewLexState[jjmatchedKind] != -1)
                            curLexState = jjnewLexState[jjmatchedKind];
                        return matchedToken;
                    } else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                        if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                            matchedToken = jjFillToken();
                            if (specialToken == null)
                                specialToken = matchedToken;
                            else {
                                matchedToken.specialToken = specialToken;
                                specialToken = (specialToken.next = matchedToken);
                            }
                            SkipLexicalActions(matchedToken);
                        } else
                            SkipLexicalActions(null);
                        if (jjnewLexState[jjmatchedKind] != -1)
                            curLexState = jjnewLexState[jjmatchedKind];
                        continue EOFLoop;
                    }
                    MoreLexicalActions();
                    if (jjnewLexState[jjmatchedKind] != -1)
                        curLexState = jjnewLexState[jjmatchedKind];
                    curPos = 0;
                    jjmatchedKind = 0x7fffffff;
                    try {
                        curChar = input_stream.readChar();
                        continue;
                    } catch (java.io.IOException e1) {
                    }
                }
                int error_line = input_stream.getEndLine();
                int error_column = input_stream.getEndColumn();
                String error_after = null;
                boolean EOFSeen = false;
                try {
                    input_stream.readChar();
                    input_stream.backup(1);
                } catch (java.io.IOException e1) {
                    EOFSeen = true;
                    error_after = curPos <= 1 ? "" : input_stream.GetImage();
                    if (curChar == '\n' || curChar == '\r') {
                        error_line++;
                        error_column = 0;
                    } else
                        error_column++;
                }
                if (!EOFSeen) {
                    input_stream.backup(1);
                    error_after = curPos <= 1 ? "" : input_stream.GetImage();
                }
                throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
            }
        }
    }

    final void SkipLexicalActions(Token matchedToken) {
        switch (jjmatchedKind) {
            default :
                break;
        }
    }

    final void MoreLexicalActions() {
        jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
        switch (jjmatchedKind) {
            case 33:
                if (image == null)
                    image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen)));
                else
                    image.append(input_stream.GetSuffix(jjimageLen));
                jjimageLen = 0;
                char ch = image.charAt(image.length() - 1);
                switch (ch) {
                    case 'n':
                        image = new StringBuffer("\n");
                        break; // $NON-NLS-1$
                    case 't':
                        image = new StringBuffer("\t");
                        break; // $NON-NLS-1$
                    case 'b':
                        image = new StringBuffer("\b");
                        break; // $NON-NLS-1$
                    case 'r':
                        image = new StringBuffer("\r");
                        break; // $NON-NLS-1$
                    case 'f':
                        image = new StringBuffer("\f");
                        break; // $NON-NLS-1$
                    case '\\':
                        image = new StringBuffer("\\");
                        break; // $NON-NLS-1$
                    case '\'':
                        image = new StringBuffer("'");
                        break; // $NON-NLS-1$
                    case '\"':
                        image = new StringBuffer("\"");
                        break; // $NON-NLS-1$
                    default:
                        System.out.println("Warning: Unknown token parsed on " + image.toString());
                }
                break;
            case 34:
                if (image == null)
                    image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen)));
                else
                    image.append(input_stream.GetSuffix(jjimageLen));
                jjimageLen = 0;
                char ch_octal = (char) Integer.parseInt(image.substring(1), 8);
                image = new StringBuffer(String.valueOf(ch_octal));
                break;
            case 35:
                if (image == null)
                    image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen)));
                else
                    image.append(input_stream.GetSuffix(jjimageLen));
                jjimageLen = 0;
                char ch_uni = (char) Integer.parseInt(image.substring(1), 16);
                image = new StringBuffer(String.valueOf(ch_uni));
                break;
            default :
                break;
        }
    }
}
