/* Generated By:JJTree&JavaCC: Do not edit this line. BifParser.java */
package edu.ksu.cis.bnj.bbn.converter.bif;

/*
 *
 * This file is part of Bayesian Network for Java (BNJ).
 *
 * BNJ is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * BNJ is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with BNJ in LICENSE.txt file; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */

import edu.ksu.cis.bnj.bbn.*;
import edu.ksu.cis.bnj.bbn.converter.Converter;
import edu.ksu.cis.kdd.util.parser.ast.*;

import java.io.*;
import java.util.*;

public class BifParser implements /*@bgen(jjtree)*/ BifParserTreeConstants, Converter, BifParserConstants {/*@bgen(jjtree)*/
    protected JJTBifParserState jjtree = new JJTBifParserState();
    protected Hashtable nodeCache = new Hashtable();
    protected Hashtable edgeCache = new Hashtable();
    protected Hashtable valueCache = new Hashtable();
    protected Hashtable tableCache = new Hashtable();
    protected Hashtable partialValuesCache = new Hashtable();

    protected static String ln = System.getProperty("line.separator"); // $NON-NLS-1$

    public BifParser() {
        // Do nothing, just to provide a stub
    }

    public void initialize() {
        nodeCache = new Hashtable();
        edgeCache = new Hashtable();
        valueCache = new Hashtable();
        tableCache = new Hashtable();
        partialValuesCache = new Hashtable();
    }

    public BBNGraph load(InputStream r) {
        BifParser p = new BifParser(r);
        BBNGraph g = p.CompilationUnit();
        initialize();
        System.gc();
        return g;
    }

    /**
     * We ignore properties in saving, except the position.
     *
     * @see edu.ksu.cis.bnj.bbn.converter.Converter#save(OutputStream, BBNGraph)
     */
    public void save(OutputStream os, BBNGraph graph) {
        Writer w = new OutputStreamWriter(os);
        initialize();
        try {
            w.write("network \"" + graph.getName() + "\" {" + ln); // $NON-NLS-1$ // $NON-NLS-2$
            w.write("}" + ln + ln); // $NON-NLS-1$

            // Process the variables
            Set nodes = graph.getNodes();
            for (Iterator i = nodes.iterator(); i.hasNext();) {
                BBNNode node = (BBNNode) i.next();
                BBNValue value = node.getValues();
                String nodeName = node.getLabel();
                nodeCache.put(nodeName, node);

                w.write("variable "); // $NON-NLS-1$
                if (value instanceof BBNContinuousValue)
                    w.write("continuous "); // $NON-NLS-1$
                if (node.isDecision())
                    w.write("decision "); // $NON-NLS-1$
                else if (node.isUtility())
                    w.write("utility "); // $NON-NLS-1$
                w.write("\"" + nodeName + "\" {" + ln); // $NON-NLS-1$ // $NON-NLS-2$
                if (value instanceof BBNContinuousValue) {
                    w.write("   type continuous = "); // $NON-NLS-1$
                    throw new RuntimeException("We don't know how to write continuous value in BIF!"); // $NON-NLS-1$
                } else {
                    if (!node.isUtility()) {
                        BBNDiscreteValue dvalue = (BBNDiscreteValue) value;
                        w.write("   type discrete[" + dvalue.size() + "] = { "); // $NON-NLS-1$ // $NON-NLS-2$
                        for (Iterator j = dvalue.iterator(); j.hasNext();) {
                            w.write("\"" + j.next() + "\" ");  // $NON-NLS-1$ // $NON-NLS-2$
                        }
                        w.write("};" + ln); // $NON-NLS-1$
                        LinkedList ll = new LinkedList();
                        ll.addAll(dvalue);
                        valueCache.put(nodeName, ll);
                    }
                }
                try {
                    List ll = (List) node.getProperty().get("position"); // $NON-NLS-1$
                    Double xpos = (Double) ll.get(0);
                    Double ypos = (Double) ll.get(1);
                    w.write("   property \"position = (" + Math.round(xpos.doubleValue()) + "," + // $NON-NLS-1$ // $NON-NLS-2$
                            Math.round(ypos.doubleValue()) + ")\" ;" + ln); // $NON-NLS-1$
                } catch (Exception ee) {
                    // If failed, don't write anything about the positions;
                }
                w.write("}" + ln + ln); // $NON-NLS-1$
            }

            for (Iterator i = nodes.iterator(); i.hasNext();) {
                BBNNode node = (BBNNode) i.next();
                if (node.isDecision()) continue; // Decision nodes don't have CPTs
                BBNValue value = node.getValues();
                String nodeName = node.getLabel();

                w.write("probability ( \"" + nodeName + "\" "); // $NON-NLS-1$ // $NON-NLS-2$
                List parents = node.getParents();
                LinkedList eligibleParents = new LinkedList();
                if (parents != null && parents.size() > 0) {
                    w.write("| "); // $NON-NLS-1$
                    for (Iterator j = parents.iterator(); j.hasNext();) {
                        BBNNode parent = (BBNNode) j.next();
                        String parentName = parent.getLabel();
                        w.write("\"" + parentName + "\" "); // $NON-NLS-1$ // $NON-NLS-2$
                        if (!parent.isUtility()) eligibleParents.add(parentName);
                    }
                }
                w.write(") {" + ln); // $NON-NLS-1$
                if (!node.isUtility()) eligibleParents.addFirst(nodeName);
                String CPTString = saveCPT(eligibleParents, new Hashtable(), node.getCPF().getTable(), new StringBuffer());
                w.write("   table " + CPTString + ";" + ln); // $NON-NLS-1$ // $NON-NLS-2$
                w.write("}" + ln + ln); // $NON-NLS-1$
            }
            w.flush();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    private String saveCPT(LinkedList nodeList, Hashtable curQuery, Hashtable CPF, StringBuffer buf) {
        String name = (String) nodeList.removeFirst();
        List values = (List) valueCache.get(name);
        for (Iterator i = values.iterator(); i.hasNext();) {
            Object value = i.next();
            curQuery.put(name, value);
            if (nodeList.size() == 0) {
                Object cpfval = CPF.get(curQuery);
                assert (cpfval != null);
                buf.append(cpfval + " "); // $NON-NLS-1$
            } else {
                saveCPT(nodeList, curQuery, CPF, buf);
            }
        }

        nodeList.addFirst(name);
        return buf.toString();
    }


    protected BBNGraph processGraph(BBNGraph g) {
        if (g == null)
            throw new RuntimeException("Bug! Graph is null at BifParser.processGraph!");

        // Building nodes and edges
        g.addNodes(nodeCache.values());

        // Iterate through the edges to construct the edges and to fill in the CPT.
        for (Enumeration e = edgeCache.keys(); e.hasMoreElements();) {
            String nodeName = (String) e.nextElement();
            List parents = (List) edgeCache.get(nodeName);

            BBNNode node = (BBNNode) nodeCache.get(nodeName);
            if (node == null)
                throw new RuntimeException("Cannot resolve node " + nodeName);

            LinkedList nodeList = new LinkedList();

            for (Iterator i = parents.iterator(); i.hasNext();) {
                String parentName = (String) i.next();
                BBNNode parentNode = (BBNNode) nodeCache.get(parentName);
                if (parentNode == null)
                    throw new RuntimeException("Cannot resolve node " + parentName);
                if (parentNode.isUtility())
                    throw new RuntimeException("Utility nodes can never be parent nodes!");
                try {
                    g.addEdge(parentNode, node);
                } catch (Exception ex) {
                    throw new RuntimeException(ex);
                }

                if (valueCache.get(parentName) != null) nodeList.add(parentName);
            }

            // if it's a decision node, don't bother constructing a CPF
            if (node.isDecision()) continue;

            if (valueCache.get(nodeName) == null && nodeList.size() == 0) continue;

            LinkedList dataSeries = (LinkedList) partialValuesCache.get(nodeName);
            LinkedList dataList = (LinkedList) tableCache.get(nodeName);
            if (dataSeries != null && dataList != null)
                throw new RuntimeException("Error: Duplicate table declarations on " + nodeName);
            if (dataSeries == null && dataList == null)
                throw new RuntimeException("Error: No CPTs are defined on " + nodeName);

            Hashtable cpf = null;
            if (dataList != null) {
                if (valueCache.get(nodeName) != null) nodeList.addFirst(nodeName);
                cpf = formatCPF(nodeList, dataList, new Hashtable(), new Hashtable());
            } else {
                List nodeValue = (List) valueCache.get(nodeName);
                LinkedList defaultList = null;

                cpf = new Hashtable();
                for (Iterator ee = dataSeries.iterator(); ee.hasNext();) {
                    Object[] wrapper = (Object[]) ee.next();
                    assert(wrapper.length == 2);
                    if (wrapper[0] instanceof String) {
                        defaultList = (LinkedList) wrapper[1];
                        if (defaultList.size() != nodeValue.size())
                            throw new RuntimeException("Table cardinality mismatch in default entry!");
                        continue;
                    } else
                        assert(wrapper[0] instanceof LinkedList);

                    LinkedList idList = (LinkedList) wrapper[0];
                    if (idList.size() != nodeList.size())
                        throw new RuntimeException("Table cardinality mismatch!");
                    List probList = (List) wrapper[1];
                    if (probList.size() != nodeValue.size())
                        throw new RuntimeException("Table cardinality mismatch!");
                    List queryList = getQueries((LinkedList) nodeList, idList, new Hashtable(), new LinkedList());
                    for (Iterator i = queryList.iterator(); i.hasNext();) {
                        Hashtable query = (Hashtable) i.next();
                        Iterator it = probList.iterator();
                        for (Iterator j = nodeValue.iterator(); j.hasNext();) {
                            query.put(nodeName, j.next());
                            if (cpf.get(query) != null) continue; // already defined, so no need to rewrite
                            Object val = it.next();
                            if (val instanceof Double) {
                                cpf.put(query.clone(), new BBNConstant(((Double) val).doubleValue()));
                            } else {
                                throw new RuntimeException("Don't know yet on how to add continuous values");
                            }
                        }
                    }
                }

                if (defaultList == null) {
                    int pad = nodeValue.size();
                    defaultList = new LinkedList();
                    for (int i = 0; i < pad; i++)
                        defaultList.add(new Double(0.0));
                }
                if (valueCache.get(nodeName) != null) nodeList.add(nodeName);
                padCPFWithDefault((LinkedList) nodeList, defaultList, new Hashtable(), cpf);
            }
            node.setCPF(cpf);
        }

        return g;
    }

    /**
     * Because BIF distribution table format is compact, we must pad other
     * values with the default values
     *
     * @param condset     The node set
     * @param defaultList The default value list
     * @param query       The query to pad
     * @param CPF         Current CPF
     */
    private void padCPFWithDefault(LinkedList condset, LinkedList defaultList, Hashtable query, Hashtable CPF) {
        Object current = condset.removeFirst();
        List values = (List) valueCache.get(current);
        Iterator di = null;
        if (condset.size() == 0) di = defaultList.iterator();
        for (Iterator i = values.iterator(); i.hasNext();) {
            Object val = i.next();
            query.put(current, val);
            if (condset.size() == 0) {
                if (CPF.get(query) == null) {
                    Double dbl = (Double) di.next();
                    CPF.put(query.clone(), new BBNConstant(dbl.doubleValue()));
                }
            } else {
                padCPFWithDefault(condset, defaultList, query, CPF);
            }
        }
        condset.addFirst(current);
    }

    /**
     * Expand value list that contains asterisks into the actual values.
     */
    private List getQueries(LinkedList nodeList, LinkedList valueList, Hashtable curQuery, List queries) {
        String name = (String) nodeList.removeFirst();
        String value = (String) valueList.removeFirst();

        if (value.equals("*")) { // $NON-NLS-1$
            List values = (List) valueCache.get(name);
            for (Iterator i = values.iterator(); i.hasNext();) {
                Object val = i.next();
                curQuery.put(name, val);
                if (nodeList.size() > 0) {
                    getQueries(nodeList, valueList, curQuery, queries);
                } else {
                    queries.add(curQuery.clone());
                }
            }
        } else {
            curQuery.put(name, value);
            if (nodeList.size() > 0) {
                getQueries(nodeList, valueList, curQuery, queries);
            } else {
                queries.add(curQuery.clone());
            }
        }

        nodeList.addFirst(name);
        valueList.addFirst(value);
        return queries;
    }

    /**
     * Reformat the list of lists into CPF
     *
     * @param nodeList   Basically list of node name and its value list
     * @param data       The data in lists
     * @param queryValue BBNQuery entry to be inputted
     * @param input      the resulting CPF, passed recursively while building
     * @return Hashtable the CPF
     */
    protected Hashtable formatCPF(LinkedList nodeList, LinkedList data, Hashtable queryValue, Hashtable input) {
        String name = (String) nodeList.removeFirst();
        List values = (List) valueCache.get(name);

        for (Iterator i = values.iterator(); i.hasNext();) {
            Object value = i.next();
            queryValue.put(name, value);
            if (nodeList.size() > 0) {
                formatCPF(nodeList, data, queryValue, input);
            } else {
                Hashtable query = (Hashtable) queryValue.clone();
                Object probValue = data.removeFirst();
                if (probValue instanceof Double)
                    probValue = new BBNConstant(((Double) probValue).doubleValue());
                input.put(query, probValue);
            }
        }
        nodeList.addFirst(name);
        return input;
    }

    /**
     * This is to reset cache. Useful later if we decided to support OOBN.
     */
    protected void resetCache() {
        nodeCache = new Hashtable();
        edgeCache = new Hashtable();
        valueCache = new Hashtable();
    }

    public static void help() {
        System.out.println("Hugin .net Parser:  Usage is one of:");
        System.out.println("         java BifParser < inputfile");
        System.out.println("OR");
        System.out.println("         java BifParser inputfile");
    }

    public static void main(String[] args) {
        if (args.length > 1) {
            help();
            return;
        }
        try {
            if (args.length == 0) {
                System.out.println("Bif Parser:  Reading from standard input");
                new BifParser().load(System.in);
            } else if (args.length == 1) {
                System.out.println("Bif Parser:  Reading from file " + args[0]);
                new BifParser().load(new FileInputStream(args[0]));
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
            System.out.println("Error!");
        }
    }

    /**
     * *************************************
     * THE BIF LANGUAGE GRAMMAR STARTS HERE *
     * **************************************
     */


    /*
       If we handle OOBN, the return value must be changed into a list or a set.
       Then we have to change the loader interface quite a bit.
       OR...
       Make a wrapper class. Either way is ok.

       But it's not ready yet, since we have to make some interconnection between
       graph object. Probably we can make BBNGraph into a wrapper class that can
       connect to another node in another graph.
    */
    final public BBNGraph CompilationUnit() throws ParseException {
        BBNGraph graph = new BBNGraph();
        //LinkedList list = new LinkedList(); // Uncomment this line if we want to support OOBN
        Hashtable prop = new Hashtable();
        String name = null;
        Token t = null;
        jj_consume_token(NETWORK);
        name = StringOrID();
        graph.setName(name);
        jj_consume_token(LBRACE);
        label_1:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case PROPERTY:
                    ;
                    break;
                default:
                    jj_la1[0] = jj_gen;
                    break label_1;
            }
            Property(prop);
        }
        jj_consume_token(RBRACE);
        label_2:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case VARIABLE:
                    Node();
                    break;
                case PROBABILITY:
                    Edge();
                    break;
                default:
                    jj_la1[1] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case VARIABLE:
                case PROBABILITY:
                    ;
                    break;
                default:
                    jj_la1[2] = jj_gen;
                    break label_2;
            }
        }
        graph.setProperty(prop);
        {
            if (true) return processGraph(graph);
        }
        throw new Error("Missing return statement in function");
    }

    final public void Property(Hashtable prop) throws ParseException {
        String _s = null;
        Token t1 = null, t2 = null;
        Object o;
        jj_consume_token(PROPERTY);
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case IDENTIFIER:
                t1 = jj_consume_token(IDENTIFIER);
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case ASSIGN:
                        jj_consume_token(ASSIGN);
                        break;
                    default:
                        jj_la1[3] = jj_gen;
                        ;
                }
                if (jj_2_1(2)) {
                    jj_consume_token(LPAREN);
                    o = NumberList();
                    jj_consume_token(RPAREN);
                    prop.put(t1.image, o);
                } else {
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case LPAREN:
                            jj_consume_token(LPAREN);
                            o = StringList();
                            jj_consume_token(RPAREN);
                            prop.put(t1.image, o);
                            break;
                        case INTEGER_LITERAL:
                        case FLOATING_POINT_LITERAL:
                            o = NumberLiteral();
                            prop.put(t1.image, o);
                            break;
                        case STRING_LITERAL:
                            o = StringLiteral();
                            prop.put(t1.image, o);
                            break;
                        case IDENTIFIER:
                            t2 = jj_consume_token(IDENTIFIER);
                            prop.put(t1.image, t2.image);
                            break;
                        default:
                            jj_la1[4] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                }
                break;
            case STRING_LITERAL:
                _s = StringLiteral();
                int idx = _s.indexOf('=');
                if (idx > 0) {
                    String propName = _s.substring(0, idx).trim();
                    String value = _s.substring(idx + 1).trim();
                    if (value.startsWith("(") && value.endsWith(")")) { // $NON-NLS-1$ // $NON-NLS-2$
                        StringTokenizer tok = new StringTokenizer(value.substring(1, value.length() - 1), ",| \t"); // $NON-NLS-1$
                        LinkedList values = new LinkedList();
                        while (tok.hasMoreTokens()) {
                            String token = tok.nextToken();
                            try {
                                values.add(new Double(token));
                            } catch (Exception e) {
                                values.add(token);
                            }
                        }
                        prop.put(propName, values);
                    } else {
                        try {
                            prop.put(propName, new Double(value));
                        } catch (Exception e) {
                            prop.put(propName, value);
                        }
                    }
                }
                break;
            default:
                jj_la1[5] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        jj_consume_token(SEMICOLON);
    }

    final public void Node() throws ParseException {
        BBNNode node = new BBNNode();
        LinkedList list = null;
        String name;
        Hashtable property = new Hashtable();
        boolean isContinuous = false;
        jj_consume_token(VARIABLE);
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case CONTINUOUS:
                jj_consume_token(CONTINUOUS);
                isContinuous = true;
                break;
            default:
                jj_la1[6] = jj_gen;
                ;
        }
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case UTILITY:
            case DECISION:
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case DECISION:
                        jj_consume_token(DECISION);
                        node.setType(BBNNode.DECISION);
                        break;
                    case UTILITY:
                        jj_consume_token(UTILITY);
                        node.setType(BBNNode.UTILITY);
                        break;
                    default:
                        jj_la1[7] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                break;
            default:
                jj_la1[8] = jj_gen;
                ;
        }
        name = StringOrID();
        jj_consume_token(LBRACE);
        node.setName(name);
        node.setLabel(name);
        label_3:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case TYPE:
                case PROPERTY:
                    ;
                    break;
                default:
                    jj_la1[9] = jj_gen;
                    break label_3;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case PROPERTY:
                    Property(property);
                    break;
                case TYPE:
                    jj_consume_token(TYPE);
                    jj_consume_token(DISCRETE);
                    jj_consume_token(LBRACKET);
                    jj_consume_token(INTEGER_LITERAL);
                    jj_consume_token(RBRACKET);
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case ASSIGN:
                            jj_consume_token(ASSIGN);
                            break;
                        default:
                            jj_la1[10] = jj_gen;
                            ;
                    }
                    jj_consume_token(LBRACE);
                    list = IDList();
                    jj_consume_token(RBRACE);
                    jj_consume_token(SEMICOLON);
                    if (isContinuous) {
                        if (true) throw new RuntimeException("Continuous nodes are not supposed to have node values " + name);
                    }
                    if (node.isUtility()) {
                        if (true) throw new RuntimeException("Utility nodes are not supposed to have node values " + name);
                    }
                    if (valueCache.get(name) != null) {
                        if (true) throw new RuntimeException("Duplicated declaration of value states for node " + name);
                    }
                    valueCache.put(name, list);
                    node.setValues(new BBNDiscreteValue(list));
                    break;
                default:
                    jj_la1[11] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        jj_consume_token(RBRACE);
        Object _label = property.get("label"); // $NON-NLS-1$
        if (_label instanceof String)
            node.setLabel((String) _label);
        node.setProperty(property);
        nodeCache.put(name, node);
    }

    final public void Edge() throws ParseException {
        LinkedList parentList = new LinkedList();
        String nodeName = null, _s = null;
        List idList = null, data = null, defaultData = null;
        LinkedList valueList = new LinkedList();
        Hashtable tbl = new Hashtable();
        Hashtable prop = new Hashtable();
        Token t;
        jj_consume_token(PROBABILITY);
        jj_consume_token(LPAREN);
        nodeName = StringOrID();
        label_4:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case STRING_LITERAL:
                case IDENTIFIER:
                case COMMA:
                case BIT_OR:
                    ;
                    break;
                default:
                    jj_la1[12] = jj_gen;
                    break label_4;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case COMMA:
                case BIT_OR:
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case BIT_OR:
                            jj_consume_token(BIT_OR);
                            break;
                        case COMMA:
                            jj_consume_token(COMMA);
                            break;
                        default:
                            jj_la1[13] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                    break;
                default:
                    jj_la1[14] = jj_gen;
                    ;
            }
            _s = StringOrID();
            parentList.add(_s);
        }
        jj_consume_token(RPAREN);
        jj_consume_token(LBRACE);
        label_5:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case TABLE:
                    jj_consume_token(TABLE);
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case COMMA:
                        case ASSIGN:
                        case BIT_OR:
                            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                                case ASSIGN:
                                    jj_consume_token(ASSIGN);
                                    break;
                                case COMMA:
                                    jj_consume_token(COMMA);
                                    break;
                                case BIT_OR:
                                    jj_consume_token(BIT_OR);
                                    break;
                                default:
                                    jj_la1[15] = jj_gen;
                                    jj_consume_token(-1);
                                    throw new ParseException();
                            }
                            break;
                        default:
                            jj_la1[16] = jj_gen;
                            ;
                    }
                    data = NumberList();
                    if (tableCache.get(nodeName) != null || partialValuesCache.get(nodeName) != null) {
                        if (true) throw new RuntimeException("Error: Duplicate table entries");
                    }
                    tableCache.put(nodeName, data);
                    break;
                case _DEFAULT:
                    jj_consume_token(_DEFAULT);
                    defaultData = NumberList();
                    if (tbl.get("default") != null) // $NON-NLS-1$
                    {
                        if (true) throw new RuntimeException("Error: Duplicate default entries");
                    }
                    tbl.put("default", data);
                    valueList.add(new Object[]{"default", data});
                    break;
                case LPAREN:
                    jj_consume_token(LPAREN);
                    idList = IDOrStarList();
                    jj_consume_token(RPAREN);
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case COLON:
                            jj_consume_token(COLON);
                            break;
                        default:
                            jj_la1[17] = jj_gen;
                            ;
                    }
                    data = NumberList();
                    HashSet set = new HashSet();
                    set.addAll(idList);
                    if (tbl.get(idList) != null) {
                        if (true) throw new RuntimeException("Error: Duplicate table entries");
                    }
                    valueList.add(new Object[]{idList, data});
                    tbl.put(idList, data);
                    break;
                case PROPERTY:
                    Property(prop);
                    break;
                default:
                    jj_la1[18] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            jj_consume_token(SEMICOLON);
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case PROPERTY:
                case TABLE:
                case _DEFAULT:
                case LPAREN:
                    ;
                    break;
                default:
                    jj_la1[19] = jj_gen;
                    break label_5;
            }
        }
        jj_consume_token(RBRACE);
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case SEMICOLON:
                jj_consume_token(SEMICOLON);
                break;
            default:
                jj_la1[20] = jj_gen;
                ;
        }
        if (edgeCache.get(nodeName) != null) {
            {
                if (true) throw new RuntimeException("Duplicated data definition and parents of node " + nodeName);
            }
        }
        edgeCache.put(nodeName, parentList);
        if (tableCache.get(nodeName) != null && tbl.size() > 0) {
            if (true) throw new RuntimeException("Error: Duplicate table entries");
        }
        if (valueList.size() > 0) partialValuesCache.put(nodeName, valueList);
    }

    final public ASTExpr Expr() throws ParseException {
        ASTExpr e1 = null, e2 = null;
        e1 = MulDivExpr();
        label_6:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case PLUS:
                case MINUS:
                    ;
                    break;
                default:
                    jj_la1[21] = jj_gen;
                    break label_6;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case PLUS:
                    jj_consume_token(PLUS);
                    e2 = MulDivExpr();
                    e1 = new ASTAddExpr(e1, e2);
                    break;
                case MINUS:
                    jj_consume_token(MINUS);
                    e2 = MulDivExpr();
                    e1 = new ASTSubExpr(e1, e2);
                    break;
                default:
                    jj_la1[22] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        {
            if (true) return e1;
        }
        throw new Error("Missing return statement in function");
    }

    final public ASTExpr MulDivExpr() throws ParseException {
        ASTExpr e1 = null, e2 = null;
        e1 = PowExpr();
        label_7:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case STAR:
                case SLASH:
                    ;
                    break;
                default:
                    jj_la1[23] = jj_gen;
                    break label_7;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case STAR:
                    jj_consume_token(STAR);
                    e2 = PowExpr();
                    e1 = new ASTMulExpr(e1, e2);
                    break;
                case SLASH:
                    jj_consume_token(SLASH);
                    e2 = PowExpr();
                    e1 = new ASTDivExpr(e1, e2);
                    break;
                default:
                    jj_la1[24] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        {
            if (true) return e1;
        }
        throw new Error("Missing return statement in function");
    }

    final public ASTExpr PowExpr() throws ParseException {
        ASTExpr e1 = null, e2 = null;
        e1 = UnaryExpr();
        label_8:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case BIT_XOR:
                    ;
                    break;
                default:
                    jj_la1[25] = jj_gen;
                    break label_8;
            }
            jj_consume_token(BIT_XOR);
            e2 = UnaryExpr();
            e1 = new ASTPowExpr(e1, e2);
        }
        {
            if (true) return e1;
        }
        throw new Error("Missing return statement in function");
    }

    final public ASTExpr UnaryExpr() throws ParseException {
        ASTExpr e1 = null;
        Double d = null;
        Token t = null;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case PLUS:
                jj_consume_token(PLUS);
                e1 = UnaryExpr();
                break;
            case MINUS:
                jj_consume_token(MINUS);
                e1 = UnaryExpr();
                e1 = new ASTNegExpr(e1);
                break;
            case LPAREN:
                jj_consume_token(LPAREN);
                e1 = Expr();
                jj_consume_token(RPAREN);
                break;
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
                d = NumberLiteral();
                e1 = new ASTLiteral(d);
                break;
            case IDENTIFIER:
                t = jj_consume_token(IDENTIFIER);
                e1 = new ASTVariable(t.image);
                break;
            default:
                jj_la1[26] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        {
            if (true) return e1;
        }
        throw new Error("Missing return statement in function");
    }

    final public String StringLiteral() throws ParseException {
        Token t;
        t = jj_consume_token(STRING_LITERAL);
        {
            if (true) return t.image.substring(1, t.image.length() - 1);
        }
        throw new Error("Missing return statement in function");
    }

    final public LinkedList StringList() throws ParseException {
        LinkedList list = new LinkedList();
        String s;
        jj_consume_token(LPAREN);
        label_9:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case STRING_LITERAL:
                    ;
                    break;
                default:
                    jj_la1[27] = jj_gen;
                    break label_9;
            }
            s = StringLiteral();
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case COMMA:
                case BIT_OR:
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case COMMA:
                            jj_consume_token(COMMA);
                            break;
                        case BIT_OR:
                            jj_consume_token(BIT_OR);
                            break;
                        default:
                            jj_la1[28] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                    break;
                default:
                    jj_la1[29] = jj_gen;
                    ;
            }
            list.add(s);
        }
        jj_consume_token(RPAREN);
        {
            if (true) return list;
        }
        throw new Error("Missing return statement in function");
    }

    final public Double NumberLiteral() throws ParseException {
        Token t;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case FLOATING_POINT_LITERAL:
                t = jj_consume_token(FLOATING_POINT_LITERAL);
                break;
            case INTEGER_LITERAL:
                t = jj_consume_token(INTEGER_LITERAL);
                break;
            default:
                jj_la1[30] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        {
            if (true) return new Double(t.image);
        }
        throw new Error("Missing return statement in function");
    }

    final public LinkedList NumberOrFuncList() throws ParseException {
        LinkedList list = new LinkedList();
        Double number;
        ASTExpr e1, e2;
        int sgn = 1;
        jj_consume_token(LPAREN);
        label_10:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case NORMAL:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case MINUS:
                    ;
                    break;
                default:
                    jj_la1[31] = jj_gen;
                    break label_10;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case MINUS:
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case MINUS:
                            jj_consume_token(MINUS);
                            sgn = -1;
                            break;
                        default:
                            jj_la1[32] = jj_gen;
                            ;
                    }
                    number = NumberLiteral();
                    list.add(new Double(sgn * number.doubleValue()));
                    sgn = 1;
                    break;
                case NORMAL:
                    jj_consume_token(NORMAL);
                    jj_consume_token(LPAREN);
                    e1 = Expr();
                    jj_consume_token(COMMA);
                    e2 = Expr();
                    jj_consume_token(RPAREN);
                    {
                        if (true) throw new RuntimeException("We don't know how to handle continuous nodes yet!");
                    }
                    break;
                default:
                    jj_la1[33] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        jj_consume_token(RPAREN);
        {
            if (true) return list;
        }
        throw new Error("Missing return statement in function");
    }

    final public LinkedList NumberList() throws ParseException {
        LinkedList list = new LinkedList();
        Double number;
        int sgn = 1;
        label_11:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case MINUS:
                    ;
                    break;
                default:
                    jj_la1[34] = jj_gen;
                    break label_11;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case MINUS:
                    jj_consume_token(MINUS);
                    sgn = -1;
                    break;
                default:
                    jj_la1[35] = jj_gen;
                    ;
            }
            number = NumberLiteral();
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case COMMA:
                case BIT_OR:
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case COMMA:
                            jj_consume_token(COMMA);
                            break;
                        case BIT_OR:
                            jj_consume_token(BIT_OR);
                            break;
                        default:
                            jj_la1[36] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                    break;
                default:
                    jj_la1[37] = jj_gen;
                    ;
            }
            list.add(new Double(sgn * number.doubleValue()));
            sgn = 1;
        }
        {
            if (true) return list;
        }
        throw new Error("Missing return statement in function");
    }

    final public LinkedList IDList() throws ParseException {
        LinkedList list = new LinkedList();
        String _s = null;
        label_12:
        while (true) {
            _s = StringOrID();
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case COMMA:
                case BIT_OR:
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case COMMA:
                            jj_consume_token(COMMA);
                            break;
                        case BIT_OR:
                            jj_consume_token(BIT_OR);
                            break;
                        default:
                            jj_la1[38] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                    break;
                default:
                    jj_la1[39] = jj_gen;
                    ;
            }
            list.add(_s);
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case STRING_LITERAL:
                case IDENTIFIER:
                    ;
                    break;
                default:
                    jj_la1[40] = jj_gen;
                    break label_12;
            }
        }
        {
            if (true) return list;
        }
        throw new Error("Missing return statement in function");
    }

    final public LinkedList IDOrStarList() throws ParseException {
        LinkedList list = new LinkedList();
        String _s = null;
        label_13:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case STRING_LITERAL:
                case IDENTIFIER:
                    _s = StringOrID();
                    break;
                case STAR:
                    jj_consume_token(STAR);
                    _s = "*";
                    break;
                default:
                    jj_la1[41] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case COMMA:
                case BIT_OR:
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case COMMA:
                            jj_consume_token(COMMA);
                            break;
                        case BIT_OR:
                            jj_consume_token(BIT_OR);
                            break;
                        default:
                            jj_la1[42] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                    break;
                default:
                    jj_la1[43] = jj_gen;
                    ;
            }
            list.add(_s);
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case STRING_LITERAL:
                case IDENTIFIER:
                case STAR:
                    ;
                    break;
                default:
                    jj_la1[44] = jj_gen;
                    break label_13;
            }
        }
        {
            if (true) return list;
        }
        throw new Error("Missing return statement in function");
    }

    final public String StringOrID() throws ParseException {
        Token t = null;
        String s = null;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case IDENTIFIER:
                t = jj_consume_token(IDENTIFIER);
                {
                    if (true) return t.image;
                }
                break;
            case STRING_LITERAL:
                s = StringLiteral();
                {
                    if (true) return s;
                }
                break;
            default:
                jj_la1[45] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        throw new Error("Missing return statement in function");
    }

    final private boolean jj_2_1(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        boolean retval = !jj_3_1();
        jj_save(0, xla);
        return retval;
    }

    final private boolean jj_3R_16() {
        if (jj_scan_token(MINUS)) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
        return false;
    }

    final private boolean jj_3R_15() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_16())
            jj_scanpos = xsp;
        else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
        if (jj_3R_17()) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
        return false;
    }

    final private boolean jj_3R_14() {
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_15()) {
                jj_scanpos = xsp;
                break;
            }
            if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
        }
        return false;
    }

    final private boolean jj_3_1() {
        if (jj_scan_token(LPAREN)) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
        if (jj_3R_14()) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
        if (jj_scan_token(RPAREN)) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
        return false;
    }

    final private boolean jj_3R_18() {
        if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
        return false;
    }

    final private boolean jj_3R_19() {
        if (jj_scan_token(INTEGER_LITERAL)) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
        return false;
    }

    final private boolean jj_3R_17() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_18()) {
            jj_scanpos = xsp;
            if (jj_3R_19()) return true;
            if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
        return false;
    }

    public BifParserTokenManager token_source;
    JavaCharStream jj_input_stream;
    public Token token, jj_nt;
    private int jj_ntk;
    private Token jj_scanpos, jj_lastpos;
    private int jj_la;
    public boolean lookingAhead = false;
    private boolean jj_semLA;
    private int jj_gen;
    final private int[] jj_la1 = new int[46];
    final private int[] jj_la1_0 = {0x4000, 0x9000, 0x9000, 0x0, 0x48800000, 0x40000000, 0x100000, 0x600000, 0x600000, 0x6000, 0x0, 0x6000, 0x40000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x34000, 0x34000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8800000, 0x40000000, 0x0, 0x0, 0x8800000, 0x8840000, 0x0, 0x8840000, 0x8800000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40000000, 0x40000000, 0x0, 0x0, 0x40000000, 0x40000000, };
    final private int[] jj_la1_1 = {0x0, 0x0, 0x0, 0x20000, 0x120, 0x20, 0x0, 0x0, 0x0, 0x0, 0x20000, 0x0, 0x8020, 0x8000, 0x8000, 0x28000, 0x28000, 0x800000, 0x100, 0x100, 0x4000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x120, 0x0, 0x8000, 0x8000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8000, 0x8000, 0x8000, 0x8000, 0x20, 0x20, 0x8000, 0x8000, 0x20, 0x20, };
    final private int[] jj_la1_2 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40, 0x40, 0x40, 0x40, 0x40, 0x0, 0x0, 0x0, 0x0, 0x6, 0x6, 0x18, 0x18, 0x80, 0x6, 0x0, 0x40, 0x40, 0x0, 0x4, 0x4, 0x4, 0x4, 0x4, 0x40, 0x40, 0x40, 0x40, 0x0, 0x8, 0x40, 0x40, 0x8, 0x0, };
    final private JJCalls[] jj_2_rtns = new JJCalls[1];
    private boolean jj_rescan = false;
    private int jj_gc = 0;

    public BifParser(java.io.InputStream stream) {
        jj_input_stream = new JavaCharStream(stream, 1, 1);
        token_source = new BifParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 46; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    public void ReInit(java.io.InputStream stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 46; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    public BifParser(java.io.Reader stream) {
        jj_input_stream = new JavaCharStream(stream, 1, 1);
        token_source = new BifParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 46; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 46; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    public BifParser(BifParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 46; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    public void ReInit(BifParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 46; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    final private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null)
            token = token.next;
        else
            token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            if (++jj_gc > 100) {
                jj_gc = 0;
                for (int i = 0; i < jj_2_rtns.length; i++) {
                    JJCalls c = jj_2_rtns[i];
                    while (c != null) {
                        if (c.gen < jj_gen) c.first = null;
                        c = c.next;
                    }
                }
            }
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    final private boolean jj_scan_token(int kind) {
        if (jj_scanpos == jj_lastpos) {
            jj_la--;
            if (jj_scanpos.next == null) {
                jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
            } else {
                jj_lastpos = jj_scanpos = jj_scanpos.next;
            }
        } else {
            jj_scanpos = jj_scanpos.next;
        }
        if (jj_rescan) {
            int i = 0;
            Token tok = token;
            while (tok != null && tok != jj_scanpos) {
                i++;
                tok = tok.next;
            }
            if (tok != null) jj_add_error_token(kind, i);
        }
        return (jj_scanpos.kind != kind);
    }

    final public Token getNextToken() {
        if (token.next != null)
            token = token.next;
        else
            token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    final public Token getToken(int index) {
        Token t = lookingAhead ? jj_scanpos : token;
        for (int i = 0; i < index; i++) {
            if (t.next != null)
                t = t.next;
            else
                t = t.next = token_source.getNextToken();
        }
        return t;
    }

    final private int jj_ntk() {
        if ((jj_nt = token.next) == null)
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        else
            return (jj_ntk = jj_nt.kind);
    }

    private java.util.Vector jj_expentries = new java.util.Vector();
    private int[] jj_expentry;
    private int jj_kind = -1;
    private int[] jj_lasttokens = new int[100];
    private int jj_endpos;

    private void jj_add_error_token(int kind, int pos) {
        if (pos >= 100) return;
        if (pos == jj_endpos + 1) {
            jj_lasttokens[jj_endpos++] = kind;
        } else if (jj_endpos != 0) {
            jj_expentry = new int[jj_endpos];
            for (int i = 0; i < jj_endpos; i++) {
                jj_expentry[i] = jj_lasttokens[i];
            }
            boolean exists = false;
            for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
                int[] oldentry = (int[]) (e.nextElement());
                if (oldentry.length == jj_expentry.length) {
                    exists = true;
                    for (int i = 0; i < jj_expentry.length; i++) {
                        if (oldentry[i] != jj_expentry[i]) {
                            exists = false;
                            break;
                        }
                    }
                    if (exists) break;
                }
            }
            if (!exists) jj_expentries.addElement(jj_expentry);
            if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
        }
    }

    final public ParseException generateParseException() {
        jj_expentries.removeAllElements();
        boolean[] la1tokens = new boolean[88];
        for (int i = 0; i < 88; i++) {
            la1tokens[i] = false;
        }
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 46; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & (1 << j)) != 0) {
                        la1tokens[32 + j] = true;
                    }
                    if ((jj_la1_2[i] & (1 << j)) != 0) {
                        la1tokens[64 + j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 88; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.addElement(jj_expentry);
            }
        }
        jj_endpos = 0;
        jj_rescan_token();
        jj_add_error_token(0, 0);
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = (int[]) jj_expentries.elementAt(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    final public void enable_tracing() {
    }

    final public void disable_tracing() {
    }

    final private void jj_rescan_token() {
        jj_rescan = true;
        for (int i = 0; i < 1; i++) {
            JJCalls p = jj_2_rtns[i];
            do {
                if (p.gen > jj_gen) {
                    jj_la = p.arg;
                    jj_lastpos = jj_scanpos = p.first;
                    switch (i) {
                        case 0:
                            jj_3_1();
                            break;
                    }
                }
                p = p.next;
            } while (p != null);
        }
        jj_rescan = false;
    }

    final private void jj_save(int index, int xla) {
        JJCalls p = jj_2_rtns[index];
        while (p.gen > jj_gen) {
            if (p.next == null) {
                p = p.next = new JJCalls();
                break;
            }
            p = p.next;
        }
        p.gen = jj_gen + xla - jj_la;
        p.first = token;
        p.arg = xla;
    }

    static final class JJCalls {
        int gen;
        Token first;
        int arg;
        JJCalls next;
    }

}
