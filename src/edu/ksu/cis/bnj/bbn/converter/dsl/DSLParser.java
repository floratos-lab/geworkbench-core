/* Generated By:JJTree&JavaCC: Do not edit this line. DSLParser.java */
package edu.ksu.cis.bnj.bbn.converter.dsl;

/*
 *
 * This file is part of Bayesian Network for Java (BNJ).
 *
 * BNJ is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * BNJ is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with BNJ in LICENSE.txt file; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */

/**
 * @author: Roby Joehanes
 */

import edu.ksu.cis.bnj.bbn.BBNConstant;
import edu.ksu.cis.bnj.bbn.BBNDiscreteValue;
import edu.ksu.cis.bnj.bbn.BBNGraph;
import edu.ksu.cis.bnj.bbn.BBNNode;
import edu.ksu.cis.bnj.bbn.converter.Converter;

import java.io.*;
import java.util.*;

public class DSLParser implements /*@bgen(jjtree)*/ DSLParserTreeConstants, Converter, DSLParserConstants {/*@bgen(jjtree)*/
    protected JJTDSLParserState jjtree = new JJTDSLParserState();
    protected Hashtable nodeCache = new Hashtable();
    protected Hashtable propertyCache = new Hashtable();

    protected static String ln = System.getProperty("line.separator"); // $NON-NLS-1$

    public DSLParser() {
        // Do nothing, just to provide a stub
    }

    public BBNGraph load(InputStream r) throws ParseException {
        DSLParser p = new DSLParser(r);
        BBNGraph g = p.CompilationUnit();
        System.gc();
        return g;
    }

    public void save(OutputStream os, BBNGraph graph) {
        Writer stream = new OutputStreamWriter(os);
        try {
            stream.write("net " + graph.getName() + " {" + ln);  // $NON-NLS-1$ // $NON-NLS-2$
            for (Iterator i = graph.topologicalSort().iterator(); i.hasNext();) {
                BBNNode node = (BBNNode) i.next();
                stream.write(getFiller(1) + "node " + node.getLabel() + " {" + ln); // $NON-NLS-1$ // $NON-NLS-2$
                stream.write(getFiller(2) + "TYPE = "); // $NON-NLS-1$
                if (node.isDecision()) {
                    stream.write("LIST");  // $NON-NLS-1$
                } else if (node.isUtility()) {
                    stream.write("TABLE"); // $NON-NLS-1$
                } else {
                    stream.write("CPT");  // $NON-NLS-1$
                }
                stream.write(";" + ln);  // $NON-NLS-1$

                // Write down the position, if known
                Hashtable prop = node.getProperty();
                if (prop != null) {
                    List pos = (List) prop.get("position");  // $NON-NLS-1$
                    if (pos != null && pos.size() == 2 && pos.get(0) instanceof Double && pos.get(1) instanceof Double) {
                        double xpos = ((Double) pos.get(0)).doubleValue();
                        double ypos = ((Double) pos.get(1)).doubleValue();
                        stream.write(getFiller(2) + "SCREEN = {" + ln);  // $NON-NLS-1$
                        stream.write(getFiller(3) + "POSITION = {" + ln);  // $NON-NLS-1$
                        stream.write(getFiller(4) + "CENTER_X = " + Math.round(xpos) + ";" + ln);  // $NON-NLS-1$  // $NON-NLS-2$
                        stream.write(getFiller(4) + "CENTER_Y = " + Math.round(ypos) + ";" + ln);  // $NON-NLS-1$  // $NON-NLS-2$
                        stream.write(getFiller(3) + "};" + ln);  // $NON-NLS-1$
                        stream.write(getFiller(2) + "};" + ln);  // $NON-NLS-1$
                    }
                }

                // Write parents
                stream.write(getFiller(2) + "PARENTS = (");  // $NON-NLS-1$
                List parents = node.getParents();
                LinkedList nodeList = new LinkedList();
                if (parents != null) {
                    for (Iterator j = parents.iterator(); j.hasNext();) {
                        BBNNode parent = (BBNNode) j.next();
                        nodeList.add(parent);
                        stream.write(parent.getLabel());
                        if (j.hasNext()) stream.write(", ");  // $NON-NLS-1$
                    }
                }
                stream.write(");" + ln);  // $NON-NLS-1$

                // States, if any
                stream.write(getFiller(2) + "DEFINITION = {" + ln);  // $NON-NLS-1$
                if (node.isDecision()) {
                    stream.write(getFiller(3) + "NAMECHOICES = (");  // $NON-NLS-1$
                } else if (!node.isUtility()) {
                    stream.write(getFiller(3) + "NAMESTATES = (");  // $NON-NLS-1$
                }

                if (!node.isUtility()) {
                    BBNDiscreteValue dval = (BBNDiscreteValue) node.getValues();
                    for (Iterator j = dval.iterator(); j.hasNext();) {
                        stream.write(j.next().toString());
                        if (j.hasNext()) stream.write(", ");  // $NON-NLS-1$
                    }
                    stream.write(");" + ln);  // $NON-NLS-1$
                    nodeList.add(node);
                }

                // CPT, if any
                if (node.isUtility()) {
                    stream.write(getFiller(3) + "UTILITIES = (");  // $NON-NLS-1$
                } else if (!node.isDecision()) {
                    stream.write(getFiller(3) + "PROBABILITIES = (");  // $NON-NLS-1$
                }

                if (!node.isDecision()) {
                    // Saving CPT
                    String cptEntries = saveCPT(nodeList, node, new Hashtable(), new StringBuffer()).trim();
                    cptEntries = cptEntries.substring(0, cptEntries.length() - 1);
                    stream.write(cptEntries + ");" + ln);  // $NON-NLS-1$
                }
                stream.write(getFiller(2) + "};" + ln);  // $NON-NLS-1$
                stream.write(getFiller(1) + "};" + ln);  // $NON-NLS-1$
            }

            stream.write("};" + ln); // $NON-NLS-1$
            stream.flush();
            stream.close();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    protected String saveCPT(LinkedList nodes, BBNNode curNode, Hashtable curInst, StringBuffer buffer) {
        BBNNode node = (BBNNode) nodes.removeFirst();
        String nodeName = node.getLabel();
        BBNDiscreteValue dval = (BBNDiscreteValue) node.getValues();

        for (Iterator i = dval.iterator(); i.hasNext();) {
            String value = i.next().toString();
            curInst.put(nodeName, value);
            if (nodes.size() == 0) {
                buffer.append(curNode.query(curInst) + ", "); // $NON-NLS-1$
            } else {
                saveCPT(nodes, curNode, curInst, buffer);
            }
        }

        nodes.addFirst(node);
        return buffer.toString();
    }

    protected String getFiller(int n) {
        String tab = "     "; // $NON-NLS-1$
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < n; i++)
            buf.append(tab);
        return buf.toString();
    }

    public void initialize() {
    }

    protected BBNGraph processGraph(BBNGraph g) {
        if (g == null)
            throw new RuntimeException("Bug! Graph is null at DSLParser.processGraph!");

        g.addNodes(nodeCache.values()); // add all nodes created so far
        Hashtable valueCache = new Hashtable();
        Hashtable probCache = new Hashtable();
        Hashtable parentCache = new Hashtable();
        HashSet truthTableSet = new HashSet();

        for (Enumeration e = propertyCache.keys(); e.hasMoreElements();) {
            String nodeName = (String) e.nextElement();
            Hashtable nodeProp = (Hashtable) propertyCache.get(nodeName);
            BBNNode node = (BBNNode) nodeCache.get(nodeName);
            String type = (String) nodeProp.get("TYPE");  // $NON-NLS-1$

            // Detecting the type:
            //    CPT == Regular chance nodes, its states is at DEFINITION.NAMESTATES, CPT is at DEFINITION.PROBABILITIES
            //    LIST == Decision nodes, its states is at DEFINITION.NAMECHOICES, no CPT at all
            //    TABLE == Utility nodes, no states at all, CPT is at DEFINITION.UTILITIES
            //    TRUTHTABLE == Can be treated as CPT, except that the CPT is at DEFINITION.RESULTINGSTATES (DefRS)
            //      and the DefRS entry size is \pi (ParentArity). Each entry in DefRS is this node's value. It means
            //      that the CPT entry of the given parent instantiation is 1.0 at the node value and 0.0 for the rest.
            //      Example: See Asia.dsl example included in the distribution, look at node TbOrCa
            //           PARENTS = (Tuberculosis, LungCancer);
            //           DEFINITION = {
            //             NAMESTATES = (Nothing, CancerORTuberculosis);
            //             RESULTINGSTATES = (Nothing, CancerORTuberculosis,
            //                 CancerORTuberculosis, CancerORTuberculosis);
            //           };
            // This means when Tuberculosis = Absent && LungCancer = Absent, TbOrCa == Nothing is 1.0, but 0.0 at
            // the rest. And so forth. (Note that the CPT entry is SENSITIVE TO VALUE AND NODE ORDER!!!)

            if (type != null) {
                if (type.equals("LIST")) {  // $NON-NLS-1$
                    node.setType(BBNNode.DECISION);
                } else if (type.equals("TABLE")) {   // $NON-NLS-1$
                    node.setType(BBNNode.UTILITY);
                }
            } else
                type = "CPT";  // $NON-NLS-1$   // otherwise, assume ordinary chance node

            // Let's see if there is an overriding label
            Hashtable headerProp = (Hashtable) nodeProp.get("HEADER");  // $NON-NLS-1$
            if (headerProp != null) {
                String label = (String) headerProp.get("NAME");   // $NON-NLS-1$
                if (label != null) node.setLabel(label);
            }

            // The only visual property we care about is the coordinates
            Hashtable screenProp = (Hashtable) nodeProp.get("SCREEN");   // $NON-NLS-1$
            if (screenProp != null) {
                Hashtable posProp = (Hashtable) screenProp.get("POSITION");   // $NON-NLS-1$
                if (posProp != null) {
                    Double xpos = (Double) posProp.get("CENTER_X");   // $NON-NLS-1$
                    Double ypos = (Double) posProp.get("CENTER_Y");   // $NON-NLS-1$
                    if (xpos != null && ypos != null) {
                        LinkedList posList = new LinkedList();
                        posList.add(xpos);
                        posList.add(ypos);
                        Hashtable nodeProperty = new Hashtable();
                        nodeProperty.put("position", posList);
                        node.setProperty(nodeProperty);
                    }
                }
            }

            // Parents
            List parents = (List) nodeProp.get("PARENTS");   // $NON-NLS-1$
            LinkedList parentList = new LinkedList();
            if (parents != null) {
                for (Iterator i = parents.iterator(); i.hasNext();) {
                    String parentName = (String) i.next();
                    BBNNode parent = (BBNNode) nodeCache.get(parentName);
                    parentList.add(parent);
                    g.addEdge(parent, node); // add the edge
                }
            }
            parentCache.put(nodeName, parentList);

            // Definition table, can't be null
            Hashtable defProp = (Hashtable) nodeProp.get("DEFINITION");  // $NON-NLS-1$
            if (defProp == null)
                throw new RuntimeException("Expecting node definition at " + nodeName);
            List states = null;
            if (node.isDecision()) {
                states = (List) defProp.get("NAMECHOICES");  // $NON-NLS-1$
            } else if (!node.isUtility()) {
                states = (List) defProp.get("NAMESTATES");  // $NON-NLS-1$
            }

            if (states != null) {
                valueCache.put(nodeName, states);
                node.setValues(new BBNDiscreteValue(states));
            }

            if (!node.isDecision()) {
                List probList = null;
                if (type.equals("CPT")) {   // $NON-NLS-1$
                    probList = (List) defProp.get("PROBABILITIES");  // $NON-NLS-1$
                } else if (type.equals("TRUTHTABLE")) {  // $NON-NLS-1$
                    truthTableSet.add(nodeName);
                    probList = (List) defProp.get("RESULTINGSTATES");  // $NON-NLS-1$
                } else if (type.equals("TABLE")) {  // $NON-NLS-1$
                    probList = (List) defProp.get("UTILITIES");  // $NON-NLS-1$
                } else {
                    throw new RuntimeException("Don't know how to handle node type " + type);
                }
                assert (probList != null);
                probCache.put(nodeName, probList);
            }
        }

        // Second pass: Process CPT (we can't do it in one shot because of the possibility of
        // forward reference of parent nodes). CPT is COLUMN FIRST!
        for (Enumeration e = probCache.keys(); e.hasMoreElements();) {
            String nodeName = (String) e.nextElement();
            BBNNode node = (BBNNode) nodeCache.get(nodeName);
            LinkedList probList = (LinkedList) probCache.get(nodeName);
            LinkedList nodeList = (LinkedList) parentCache.get(nodeName);

            if (truthTableSet.contains(nodeName)) { // truth table
                Hashtable cpt = processTruthTable(nodeList, node, probList, new Hashtable(), new Hashtable());
                node.setCPF(cpt);
            } else {
                if (!node.isUtility()) nodeList.add(node);
                Hashtable cpt = processCPT(nodeList, probList, new Hashtable(), new Hashtable());
                node.setCPF(cpt);
            }
        }

        return g;
    }

    protected Hashtable processCPT(LinkedList nodes, LinkedList values, Hashtable curInst, Hashtable cpt) {
        BBNNode node = (BBNNode) nodes.removeFirst();
        String nodeName = node.getLabel();
        BBNDiscreteValue dval = (BBNDiscreteValue) node.getValues();

        for (Iterator i = dval.iterator(); i.hasNext();) {
            String val = i.next().toString();
            curInst.put(nodeName, val);
            if (nodes.size() == 0) {
                double p = ((Double) values.removeFirst()).doubleValue();
                cpt.put(curInst.clone(), new BBNConstant(p));
            } else {
                processCPT(nodes, values, curInst, cpt);
            }
        }
        nodes.addFirst(node);
        return cpt;
    }

    protected Hashtable processTruthTable(LinkedList nodes, BBNNode curNode, LinkedList values, Hashtable curInst, Hashtable cpt) {
        BBNNode node = (BBNNode) nodes.removeFirst();
        String nodeName = node.getLabel();
        BBNDiscreteValue dval = (BBNDiscreteValue) node.getValues();

        for (Iterator i = dval.iterator(); i.hasNext();) {
            String val = i.next().toString();
            curInst.put(nodeName, val);
            if (nodes.size() == 0) {
                String tval = (String) values.removeFirst();
                String curNodeName = curNode.getLabel();
                BBNDiscreteValue curDval = (BBNDiscreteValue) curNode.getValues();
                for (Iterator j = curDval.iterator(); j.hasNext();) {
                    String jval = j.next().toString();
                    curInst.put(curNodeName, jval);
                    if (tval.equals(jval)) {
                        cpt.put(curInst.clone(), new BBNConstant(1.0));
                    } else {
                        cpt.put(curInst.clone(), new BBNConstant(0.0));
                    }
                }
            } else {
                processTruthTable(nodes, curNode, values, curInst, cpt);
            }
        }
        nodes.addFirst(node);
        return cpt;
    }

    /**
     * This is to reset cache. Useful later if we decided to support OOBN.
     */
    protected void resetCache() {
        nodeCache = new Hashtable();
        propertyCache = new Hashtable();
    }

    public static void help() {
        System.out.println("Genie DSL Parser:  Usage is one of:");
        System.out.println("         java DSLParser < inputfile");
        System.out.println("OR");
        System.out.println("         java DSLParser inputfile");
    }

    public static void main(String[] args) {
        if (args.length > 1) {
            help();
            return;
        }
        try {
            if (args.length == 0) {
                System.out.println("Genie DSL Parser:  Reading from standard input");
                new DSLParser().load(System.in);
            } else if (args.length == 1) {
                System.out.println("Genie DSL Parser:  Reading from file " + args[0]);
                new DSLParser().load(new FileInputStream(args[0]));
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
            System.out.println("Error!");
        }
    }

    /**
     * *******************************************
     * THE GENIE DSL LANGUAGE GRAMMAR STARTS HERE *
     * ********************************************
     */
    final public BBNGraph CompilationUnit() throws ParseException {
        BBNGraph graph = new BBNGraph();
        Token t = null;
        Hashtable property = null;
        jj_consume_token(NET);
        t = jj_consume_token(IDENTIFIER);
        graph.setName(t.image);
        jj_consume_token(LBRACE);
        property = Properties();
        label_1:
        while (true) {
            Node();
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case NODE:
                    ;
                    break;
                default:
                    jj_la1[0] = jj_gen;
                    break label_1;
            }
        }
        jj_consume_token(RBRACE);
        jj_consume_token(SEMICOLON);
        {
            if (true) return processGraph(graph);
        }
        throw new Error("Missing return statement in function");
    }

    final public Hashtable Properties() throws ParseException {
        Hashtable prop = new Hashtable();
        Hashtable subProp = null;
        Double num = null;
        String str = null;
        List ll = null;
        Token t1 = null, t2 = null;
        label_2:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case IDENTIFIER:
                    ;
                    break;
                default:
                    jj_la1[1] = jj_gen;
                    break label_2;
            }
            t1 = jj_consume_token(IDENTIFIER);
            jj_consume_token(ASSIGN);
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case MINUS:
                    num = NumberLiteral();
                    prop.put(t1.image, num);
                    break;
                case STRING_LITERAL:
                    str = StringLiteral();
                    prop.put(t1.image, str);
                    break;
                case IDENTIFIER:
                    t2 = jj_consume_token(IDENTIFIER);
                    prop.put(t1.image, t2.image);
                    break;
                default:
                    jj_la1[2] = jj_gen;
                    if (jj_2_1(2)) {
                        jj_consume_token(LBRACE);
                        subProp = Properties();
                        prop.put(t1.image, subProp);
                        jj_consume_token(RBRACE);
                    } else if (jj_2_2(2)) {
                        jj_consume_token(LBRACE);
                        NumberList();
                        jj_consume_token(COMMA);
                        str = StringLiteral();
                        prop.put(t1.image, str);
                        jj_consume_token(RBRACE);
                    } else if (jj_2_3(2)) {
                        ll = StringList();
                        prop.put(t1.image, ll);
                    } else if (jj_2_4(2)) {
                        ll = NumberList();
                        prop.put(t1.image, ll);
                    } else {
                        jj_consume_token(-1);
                        throw new ParseException();
                    }
            }
            jj_consume_token(SEMICOLON);
        }
        {
            if (true) return prop;
        }
        throw new Error("Missing return statement in function");
    }

    final public void Node() throws ParseException {
        Hashtable prop = null;
        Token t = null;
        jj_consume_token(NODE);
        t = jj_consume_token(IDENTIFIER);
        jj_consume_token(LBRACE);
        prop = Properties();
        jj_consume_token(RBRACE);
        jj_consume_token(SEMICOLON);
        BBNNode node = new BBNNode();
        node.setName(t.image);
        node.setLabel(t.image);
        nodeCache.put(t.image, node);
        propertyCache.put(t.image, prop);
    }

    final public String StringLiteral() throws ParseException {
        Token t;
        t = jj_consume_token(STRING_LITERAL);
        String s = t.image.substring(1, t.image.length() - 1);
        StringTokenizer tok = new StringTokenizer(s, "\r\n"); // $NON-NLS-1$
        StringBuffer buf = new StringBuffer();
        while (tok.hasMoreTokens()) {
            String token = tok.nextToken().trim();
            if (token.endsWith("\\") && token.length() > 1) { // $NON-NLS-1$
                token = token.substring(0, token.length() - 1).trim();
            }
            buf.append(token + " "); // $NON-NLS-1$
        }
        {
            if (true) return buf.toString().trim();
        }
        throw new Error("Missing return statement in function");
    }

    final public List StringList() throws ParseException {
        LinkedList list = new LinkedList();
        String s;
        Token t;
        jj_consume_token(LPAREN);
        label_3:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case STRING_LITERAL:
                case IDENTIFIER:
                    ;
                    break;
                default:
                    jj_la1[3] = jj_gen;
                    break label_3;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case STRING_LITERAL:
                    s = StringLiteral();
                    list.add(s);
                    break;
                case IDENTIFIER:
                    t = jj_consume_token(IDENTIFIER);
                    list.add(t.image);
                    break;
                default:
                    jj_la1[4] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case COMMA:
                    jj_consume_token(COMMA);
                    break;
                default:
                    jj_la1[5] = jj_gen;
                    ;
            }
        }
        jj_consume_token(RPAREN);
        {
            if (true) return list;
        }
        throw new Error("Missing return statement in function");
    }

    final public Double NumberLiteral() throws ParseException {
        Token t;
        int sgn = 1;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case MINUS:
                jj_consume_token(MINUS);
                sgn = -1;
                break;
            default:
                jj_la1[6] = jj_gen;
                ;
        }
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case FLOATING_POINT_LITERAL:
                t = jj_consume_token(FLOATING_POINT_LITERAL);
                break;
            case INTEGER_LITERAL:
                t = jj_consume_token(INTEGER_LITERAL);
                break;
            default:
                jj_la1[7] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        {
            if (true) return new Double(sgn * Double.parseDouble(t.image));
        }
        throw new Error("Missing return statement in function");
    }

    final public List NumberList() throws ParseException {
        LinkedList list = new LinkedList();
        Double number;
        jj_consume_token(LPAREN);
        label_4:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case MINUS:
                    ;
                    break;
                default:
                    jj_la1[8] = jj_gen;
                    break label_4;
            }
            number = NumberLiteral();
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case COMMA:
                    jj_consume_token(COMMA);
                    break;
                default:
                    jj_la1[9] = jj_gen;
                    ;
            }
            list.add(number);
        }
        jj_consume_token(RPAREN);
        {
            if (true) return list;
        }
        throw new Error("Missing return statement in function");
    }

    final private boolean jj_2_1(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        boolean retval = !jj_3_1();
        jj_save(0, xla);
        return retval;
    }

    final private boolean jj_2_2(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        boolean retval = !jj_3_2();
        jj_save(1, xla);
        return retval;
    }

    final private boolean jj_2_3(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        boolean retval = !jj_3_3();
        jj_save(2, xla);
        return retval;
    }

    final private boolean jj_2_4(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        boolean retval = !jj_3_4();
        jj_save(3, xla);
        return retval;
    }

    final private boolean jj_3R_12() {
        if (jj_scan_token(IDENTIFIER)) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
        return false;
    }

    final private boolean jj_3R_11() {
        if (jj_3R_14()) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
        return false;
    }

    final private boolean jj_3R_10() {
        if (jj_3R_13()) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
        return false;
    }

    final private boolean jj_3R_8() {
        if (jj_scan_token(IDENTIFIER)) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
        return false;
    }

    final private boolean jj_3R_9() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_11()) {
            jj_scanpos = xsp;
            if (jj_3R_12()) return true;
            if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
        return false;
    }

    final private boolean jj_3R_5() {
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_8()) {
                jj_scanpos = xsp;
                break;
            }
            if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
        }
        return false;
    }

    final private boolean jj_3R_17() {
        if (jj_scan_token(INTEGER_LITERAL)) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
        return false;
    }

    final private boolean jj_3R_6() {
        if (jj_scan_token(LPAREN)) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_10()) {
                jj_scanpos = xsp;
                break;
            }
            if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
        }
        if (jj_scan_token(RPAREN)) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
        return false;
    }

    final private boolean jj_3R_14() {
        if (jj_scan_token(STRING_LITERAL)) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
        return false;
    }

    final private boolean jj_3R_7() {
        if (jj_scan_token(LPAREN)) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_9()) {
                jj_scanpos = xsp;
                break;
            }
            if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
        }
        if (jj_scan_token(RPAREN)) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
        return false;
    }

    final private boolean jj_3_4() {
        if (jj_3R_6()) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
        return false;
    }

    final private boolean jj_3R_15() {
        if (jj_scan_token(MINUS)) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
        return false;
    }

    final private boolean jj_3_3() {
        if (jj_3R_7()) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
        return false;
    }

    final private boolean jj_3R_16() {
        if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
        return false;
    }

    final private boolean jj_3R_13() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_15())
            jj_scanpos = xsp;
        else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
        xsp = jj_scanpos;
        if (jj_3R_16()) {
            jj_scanpos = xsp;
            if (jj_3R_17()) return true;
            if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
        return false;
    }

    final private boolean jj_3_2() {
        if (jj_scan_token(LBRACE)) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
        if (jj_3R_6()) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
        return false;
    }

    final private boolean jj_3_1() {
        if (jj_scan_token(LBRACE)) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
        if (jj_3R_5()) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
        if (jj_scan_token(RBRACE)) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
        return false;
    }

    public DSLParserTokenManager token_source;
    JavaCharStream jj_input_stream;
    public Token token, jj_nt;
    private int jj_ntk;
    private Token jj_scanpos, jj_lastpos;
    private int jj_la;
    public boolean lookingAhead = false;
    private boolean jj_semLA;
    private int jj_gen;
    final private int[] jj_la1 = new int[10];
    final private int[] jj_la1_0 = {0x8000, 0x800000, 0xd10000, 0xc00000, 0xc00000, 0x0, 0x0, 0x110000, 0x110000, 0x0, };
    final private int[] jj_la1_1 = {0x0, 0x0, 0x100000, 0x0, 0x0, 0x2, 0x100000, 0x0, 0x100000, 0x2, };
    final private int[] jj_la1_2 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, };
    final private JJCalls[] jj_2_rtns = new JJCalls[4];
    private boolean jj_rescan = false;
    private int jj_gc = 0;

    public DSLParser(java.io.InputStream stream) {
        jj_input_stream = new JavaCharStream(stream, 1, 1);
        token_source = new DSLParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 10; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    public void ReInit(java.io.InputStream stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 10; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    public DSLParser(java.io.Reader stream) {
        jj_input_stream = new JavaCharStream(stream, 1, 1);
        token_source = new DSLParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 10; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 10; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    public DSLParser(DSLParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 10; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    public void ReInit(DSLParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 10; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    final private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null)
            token = token.next;
        else
            token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            if (++jj_gc > 100) {
                jj_gc = 0;
                for (int i = 0; i < jj_2_rtns.length; i++) {
                    JJCalls c = jj_2_rtns[i];
                    while (c != null) {
                        if (c.gen < jj_gen) c.first = null;
                        c = c.next;
                    }
                }
            }
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    final private boolean jj_scan_token(int kind) {
        if (jj_scanpos == jj_lastpos) {
            jj_la--;
            if (jj_scanpos.next == null) {
                jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
            } else {
                jj_lastpos = jj_scanpos = jj_scanpos.next;
            }
        } else {
            jj_scanpos = jj_scanpos.next;
        }
        if (jj_rescan) {
            int i = 0;
            Token tok = token;
            while (tok != null && tok != jj_scanpos) {
                i++;
                tok = tok.next;
            }
            if (tok != null) jj_add_error_token(kind, i);
        }
        return (jj_scanpos.kind != kind);
    }

    final public Token getNextToken() {
        if (token.next != null)
            token = token.next;
        else
            token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    final public Token getToken(int index) {
        Token t = lookingAhead ? jj_scanpos : token;
        for (int i = 0; i < index; i++) {
            if (t.next != null)
                t = t.next;
            else
                t = t.next = token_source.getNextToken();
        }
        return t;
    }

    final private int jj_ntk() {
        if ((jj_nt = token.next) == null)
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        else
            return (jj_ntk = jj_nt.kind);
    }

    private java.util.Vector jj_expentries = new java.util.Vector();
    private int[] jj_expentry;
    private int jj_kind = -1;
    private int[] jj_lasttokens = new int[100];
    private int jj_endpos;

    private void jj_add_error_token(int kind, int pos) {
        if (pos >= 100) return;
        if (pos == jj_endpos + 1) {
            jj_lasttokens[jj_endpos++] = kind;
        } else if (jj_endpos != 0) {
            jj_expentry = new int[jj_endpos];
            for (int i = 0; i < jj_endpos; i++) {
                jj_expentry[i] = jj_lasttokens[i];
            }
            boolean exists = false;
            for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
                int[] oldentry = (int[]) (e.nextElement());
                if (oldentry.length == jj_expentry.length) {
                    exists = true;
                    for (int i = 0; i < jj_expentry.length; i++) {
                        if (oldentry[i] != jj_expentry[i]) {
                            exists = false;
                            break;
                        }
                    }
                    if (exists) break;
                }
            }
            if (!exists) jj_expentries.addElement(jj_expentry);
            if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
        }
    }

    final public ParseException generateParseException() {
        jj_expentries.removeAllElements();
        boolean[] la1tokens = new boolean[74];
        for (int i = 0; i < 74; i++) {
            la1tokens[i] = false;
        }
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 10; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & (1 << j)) != 0) {
                        la1tokens[32 + j] = true;
                    }
                    if ((jj_la1_2[i] & (1 << j)) != 0) {
                        la1tokens[64 + j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 74; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.addElement(jj_expentry);
            }
        }
        jj_endpos = 0;
        jj_rescan_token();
        jj_add_error_token(0, 0);
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = (int[]) jj_expentries.elementAt(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    final public void enable_tracing() {
    }

    final public void disable_tracing() {
    }

    final private void jj_rescan_token() {
        jj_rescan = true;
        for (int i = 0; i < 4; i++) {
            JJCalls p = jj_2_rtns[i];
            do {
                if (p.gen > jj_gen) {
                    jj_la = p.arg;
                    jj_lastpos = jj_scanpos = p.first;
                    switch (i) {
                        case 0:
                            jj_3_1();
                            break;
                        case 1:
                            jj_3_2();
                            break;
                        case 2:
                            jj_3_3();
                            break;
                        case 3:
                            jj_3_4();
                            break;
                    }
                }
                p = p.next;
            } while (p != null);
        }
        jj_rescan = false;
    }

    final private void jj_save(int index, int xla) {
        JJCalls p = jj_2_rtns[index];
        while (p.gen > jj_gen) {
            if (p.next == null) {
                p = p.next = new JJCalls();
                break;
            }
            p = p.next;
        }
        p.gen = jj_gen + xla - jj_la;
        p.first = token;
        p.arg = xla;
    }

    static final class JJCalls {
        int gen;
        Token first;
        int arg;
        JJCalls next;
    }

}
