/* Generated By:JJTree&JavaCC: Do not edit this line. DscParser.java */
package edu.ksu.cis.bnj.bbn.converter.dsc;

/*
 *
 * This file is part of Bayesian Network for Java (BNJ).
 *
 * BNJ is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * BNJ is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with BNJ in LICENSE.txt file; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */

/**
 * @author: Roby Joehanes
 */

import edu.ksu.cis.bnj.bbn.BBNDiscreteValue;
import edu.ksu.cis.bnj.bbn.BBNGraph;
import edu.ksu.cis.bnj.bbn.BBNNode;
import edu.ksu.cis.bnj.bbn.converter.Converter;

import java.io.*;
import java.util.*;

public class DscParser implements /*@bgen(jjtree)*/ DscParserTreeConstants, Converter, DscParserConstants {/*@bgen(jjtree)*/
    protected JJTDscParserState jjtree = new JJTDscParserState();
    protected BBNGraph graph = null;
    protected Hashtable nodeCache = new Hashtable();
    protected Hashtable valueCache = new Hashtable();

    protected static String ln = System.getProperty("line.separator"); // $NON-NLS-1$

    public DscParser() {
        // Do nothing, just to provide a stub
    }

    public void initialize() {
        nodeCache = new Hashtable();
        valueCache = new Hashtable();
        graph = null;
    }

    public BBNGraph load(InputStream r) throws ParseException {
        DscParser p = new DscParser(r);
        BBNGraph g = p.CompilationUnit();
        initialize();
        System.gc();
        return g;
    }

    /**
     * We ignore properties in saving, except the position.
     *
     * @see edu.ksu.cis.bnj.bbn.converter.Converter#save(OutputStream, BBNGraph)
     */
    public void save(OutputStream os, BBNGraph graph) {
        Writer w = new OutputStreamWriter(os);
        try {
            w.write("belief network \"" + mangleString(graph.getName()) + "\"" + ln); // $NON-NLS-1$ // $NON-NLS-2$
            Set nodes = graph.getNodes();
            Hashtable valueCache = new Hashtable();
            for (Iterator i = nodes.iterator(); i.hasNext();) {
                BBNNode node = (BBNNode) i.next();
                String nodeName = node.getLabel();
                BBNDiscreteValue dval = (BBNDiscreteValue) node.getValues();
                if (node.isDecision()) {
                    w.write("decision "); // $NON-NLS-1$
                } else if (node.isUtility()) {
                    w.write("utility "); // $NON-NLS-1$
                } else {
                    w.write("node "); // $NON-NLS-1$
                }
                w.write(mangleString(nodeName) + " {" + ln); // $NON-NLS-1$
                w.write(getFiller(1) + "name: \"" + node.getLabel() + "\";" + ln); // $NON-NLS-1$ // $NON-NLS-2$
                if (!node.isUtility() && dval != null && dval.size() > 0) {
                    w.write(getFiller(1) + "type: discrete[" + dval.size() + "] = {" + ln); // $NON-NLS-1$ // $NON-NLS-2$
                    LinkedList valueList = new LinkedList();
                    for (Iterator j = dval.iterator(); j.hasNext();) {
                        Object val = j.next();
                        valueList.add(val);
                        w.write(getFiller(2) + "\"" + val + "\"");  // $NON-NLS-1$ // $NON-NLS-2$
                        if (j.hasNext()) w.write(","); // $NON-NLS-1$
                        w.write(ln);
                    }
                    valueCache.put(nodeName, valueList);
                    w.write(getFiller(1) + "};" + ln); // $NON-NLS-1$
                }
                Hashtable prop = node.getProperty();
                List pos = null;
                if (prop != null && (pos = (List) prop.get("position")) != null) {  // $NON-NLS-1$
                    if (pos.size() == 2 && pos.get(0) instanceof Double && pos.get(1) instanceof Double) {
                        double xpos = (((Double) pos.get(0)).doubleValue() + 100) * 100;
                        double ypos = (((Double) pos.get(1)).doubleValue() + 100) * 100;
                        w.write(getFiller(1) + "position = (" + Math.round(xpos) + ", " + Math.round(ypos) + ");" + ln); // $NON-NLS-1$ // $NON-NLS-2$ // $NON-NLS-3$
                    }
                }
                w.write("}" + ln + ln); // $NON-NLS-1$
            }

            for (Iterator i = nodes.iterator(); i.hasNext();) {
                BBNNode node = (BBNNode) i.next();
                String nodeName = (String) node.getLabel();
                List parents = node.getParents();

                w.write("probability(" + nodeName); // $NON-NLS-1$

                if (parents != null && parents.size() > 0) {
                    w.write(" | "); // $NON-NLS-1$
                    for (Iterator j = parents.iterator(); j.hasNext();) {
                        BBNNode parent = (BBNNode) j.next();
                        w.write(parent.getLabel());
                        if (j.hasNext()) w.write(", "); // $NON-NLS-1$
                    }
                }
                w.write(") {" + ln); // $NON-NLS-1$

                if (!node.isDecision()) {
                    List dval = (List) valueCache.get(nodeName);
                    LinkedList nodeList = new LinkedList();
                    if (parents != null) {
                        for (Iterator j = parents.iterator(); j.hasNext();) {
                            BBNNode parent = (BBNNode) j.next();
                            if (!parent.isUtility()) nodeList.add(parent);
                        }
                    }

                    if (nodeList.size() > 0) {
                        Hashtable cpt = node.getCPF().getTable();
                        HashSet seenBefore = new HashSet();
                        for (Enumeration e = cpt.keys(); e.hasMoreElements();) {
                            Hashtable tbl = (Hashtable) e.nextElement();

                            StringBuffer buf = new StringBuffer();
                            buf.append("("); // $NON-NLS-1$
                            Hashtable queryTbl = new Hashtable();

                            for (Iterator j = nodeList.iterator(); j.hasNext();) {
                                BBNNode parent = (BBNNode) j.next();
                                String parentName = parent.getLabel();
                                List pdval = (List) valueCache.get(parentName);
                                Object parentValue = tbl.get(parentName);
                                assert (parentValue != null && pdval != null);
                                int parentValueIndex = pdval.indexOf(parentValue);
                                assert(parentValueIndex > -1);
                                buf.append(String.valueOf(parentValueIndex));
                                queryTbl.put(parentName, parentValue);
                                if (j.hasNext()) buf.append(", "); // $NON-NLS-1$
                            }
                            if (seenBefore.contains(queryTbl)) continue;
                            seenBefore.add(queryTbl.clone());
                            w.write(getFiller(1) + buf.toString());
                            w.write("): "); // $NON-NLS-1$

                            for (Iterator j = dval.iterator(); j.hasNext();) {
                                queryTbl.put(nodeName, j.next().toString());
                                w.write(String.valueOf(node.query(queryTbl)));
                                if (j.hasNext()) w.write(", "); // $NON-NLS-1$
                            }
                            w.write(";" + ln); // $NON-NLS-1$
                        }
                    } else {
                        assert (dval != null);
                        Hashtable tbl = new Hashtable();
                        w.write(getFiller(1));
                        for (Iterator j = dval.iterator(); j.hasNext();) {
                            tbl.put(nodeName, j.next().toString());
                            w.write(String.valueOf(node.query(tbl)));
                            if (j.hasNext()) w.write(", "); // $NON-NLS-1$
                        }
                        w.write(";" + ln); // $NON-NLS-1$
                    }
                }
                w.write("}" + ln + ln); // $NON-NLS-1$
            }
            w.flush();
            w.close();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    protected String mangleString(String s) {
        s = s.replaceAll("[^\\p{Alnum}]", "_"); // Replace all non-alphanumeric with underscore
        if (s.length() > 0 && !Character.isLetter(s.charAt(0))) s = "_" + s;
        return s;
    }

    protected String getFiller(int n) {
        String tab = "     "; // $NON-NLS-1$
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < n; i++)
            buf.append(tab);
        return buf.toString();
    }

    protected void processEdge(String nodeName, List parentNames, Hashtable cpt) {
        assert (nodeName != null);
        BBNNode node = (BBNNode) nodeCache.get(nodeName);
        assert (node != null);
        if (parentNames != null) {
            LinkedList nodeList = new LinkedList();
            for (Iterator i = parentNames.iterator(); i.hasNext();) {
                String parentName = (String) i.next();
                BBNNode parent = (BBNNode) nodeCache.get(parentName);
                assert (parent != null);
                graph.addEdge(parent, node);
                if (!parent.isUtility()) nodeList.add(parent);
            }
            Hashtable cookedCPT = processCPT(nodeList, node, new LinkedList(), new Hashtable(), cpt, new Hashtable());
            node.setCPF(cookedCPT);
        } else {
            LinkedList currentEntries = (LinkedList) cpt.get(".default"); // $NON-NLS-1$
            BBNDiscreteValue dval = (BBNDiscreteValue) node.getValues();

            assert(currentEntries != null && currentEntries.size() == dval.size());

            Hashtable curInst = new Hashtable();
            Hashtable cookedCPT = new Hashtable();
            for (Iterator i = dval.iterator(); i.hasNext();) {
                String value = i.next().toString();
                curInst.put(nodeName, value);
                cookedCPT.put(curInst.clone(), currentEntries.removeFirst());
            }
            node.setCPF(cookedCPT);
        }
    }

    protected Hashtable processCPT(LinkedList nodes, BBNNode curNode, LinkedList parentValues, Hashtable curInst, Hashtable rawCPT, Hashtable cookedCPT) {
        BBNNode node = (BBNNode) nodes.removeFirst();
        String nodeName = node.getLabel();
        BBNDiscreteValue dval = (BBNDiscreteValue) node.getValues();
        int index = 0;
        for (Iterator i = dval.iterator(); i.hasNext(); index++) {
            String value = i.next().toString();
            curInst.put(nodeName, value);
            parentValues.add(new Double(index));
            if (nodes.size() == 0) {
                BBNDiscreteValue cdval = (BBNDiscreteValue) curNode.getValues();
                String curNodeName = curNode.getLabel();

                LinkedList currentEntries = (LinkedList) rawCPT.get(parentValues);
                if (currentEntries == null) { // maybe it's a default value
                    currentEntries = (LinkedList) rawCPT.get(".default"); // $NON-NLS-1$
                }
                if (currentEntries == null) { // if default value is still null, then
                    // assign uniform priors...
                    int size = cdval.size();
                    Double p = new Double(1.0 / size);
                    currentEntries = new LinkedList();
                    for (int j = 0; j < size; j++) {
                        currentEntries.add(p);
                    }
                }
                assert (currentEntries.size() == cdval.size());
                for (Iterator j = cdval.iterator(); j.hasNext();) {
                    String curValue = j.next().toString();
                    curInst.put(curNodeName, curValue);
                    cookedCPT.put(curInst.clone(), currentEntries.removeFirst());
                }
            } else {
                processCPT(nodes, curNode, parentValues, curInst, rawCPT, cookedCPT);
            }
            parentValues.removeLast();
        }
        nodes.addFirst(node);
        return cookedCPT;
    }

    /**
     * This is to reset cache. Useful later if we decided to support OOBN.
     */
    protected void resetCache() {
        nodeCache = new Hashtable();
        valueCache = new Hashtable();
        graph = null;
    }

    public static void help() {
        System.out.println("Hugin .net Parser:  Usage is one of:");
        System.out.println("         java DscParser < inputfile");
        System.out.println("OR");
        System.out.println("         java DscParser inputfile");
    }

    public static void main(String[] args) {
        if (args.length > 1) {
            help();
            return;
        }
        try {
            if (args.length == 0) {
                System.out.println("DSC Parser:  Reading from standard input...");
                new DscParser().load(System.in);
            } else if (args.length == 1) {
                System.out.println("DSC Parser:  Reading from file " + args[0] + "...");
                new DscParser().load(new FileInputStream(args[0]));
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
            System.out.println("Error!");
        }
    }

    /**
     * *************************************
     * THE DSC LANGUAGE GRAMMAR STARTS HERE *
     * **************************************
     */
    final public BBNGraph CompilationUnit() throws ParseException {
        String name = null;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case IDENTIFIER:
                jj_consume_token(IDENTIFIER);
                break;
            default:
                jj_la1[0] = jj_gen;
                ;
        }
        jj_consume_token(NETWORK);
        name = StringOrID();
        graph = new BBNGraph();
        graph.setName(name);
        label_1:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case PROPERTIES:
                case SERVICE:
                case LBRACE:
                    ;
                    break;
                default:
                    jj_la1[1] = jj_gen;
                    break label_1;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case PROPERTIES:
                case SERVICE:
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case PROPERTIES:
                            jj_consume_token(PROPERTIES);
                            break;
                        case SERVICE:
                            jj_consume_token(SERVICE);
                            break;
                        default:
                            jj_la1[2] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                    break;
                default:
                    jj_la1[3] = jj_gen;
                    ;
            }
            jj_consume_token(LBRACE);
            label_2:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case TYPE:
                    case NAME:
                    case INTEGER_LITERAL:
                    case FLOATING_POINT_LITERAL:
                    case STRING_LITERAL:
                    case IDENTIFIER:
                    case LBRACKET:
                    case RBRACKET:
                    case SEMICOLON:
                    case COMMA:
                    case ASSIGN:
                    case COLON:
                    case MINUS:
                        ;
                        break;
                    default:
                        jj_la1[4] = jj_gen;
                        break label_2;
                }
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case STRING_LITERAL:
                    case IDENTIFIER:
                        StringOrID();
                        break;
                    case COMMA:
                        jj_consume_token(COMMA);
                        break;
                    case SEMICOLON:
                        jj_consume_token(SEMICOLON);
                        break;
                    case COLON:
                        jj_consume_token(COLON);
                        break;
                    case LBRACKET:
                        jj_consume_token(LBRACKET);
                        break;
                    case RBRACKET:
                        jj_consume_token(RBRACKET);
                        break;
                    case ASSIGN:
                        jj_consume_token(ASSIGN);
                        break;
                    case INTEGER_LITERAL:
                    case FLOATING_POINT_LITERAL:
                    case MINUS:
                        NumberLiteral();
                        break;
                    case NAME:
                        jj_consume_token(NAME);
                        break;
                    case TYPE:
                        jj_consume_token(TYPE);
                        jj_consume_token(IDENTIFIER);
                        jj_consume_token(ASSIGN);
                        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                            case ARRAY:
                            case CHOICE:
                                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                                    case ARRAY:
                                        jj_consume_token(ARRAY);
                                        break;
                                    case CHOICE:
                                        jj_consume_token(CHOICE);
                                        break;
                                    default:
                                        jj_la1[5] = jj_gen;
                                        jj_consume_token(-1);
                                        throw new ParseException();
                                }
                                jj_consume_token(OF);
                                break;
                            default:
                                jj_la1[6] = jj_gen;
                                ;
                        }
                        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                            case REAL:
                                jj_consume_token(REAL);
                                break;
                            case STRING:
                                jj_consume_token(STRING);
                                break;
                            default:
                                jj_la1[7] = jj_gen;
                                jj_consume_token(-1);
                                throw new ParseException();
                        }
                        break;
                    default:
                        jj_la1[8] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            }
            jj_consume_token(RBRACE);
        }
        label_3:
        while (true) {
            Node();
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case NODE:
                case UTILITY:
                case DECISION:
                    ;
                    break;
                default:
                    jj_la1[9] = jj_gen;
                    break label_3;
            }
        }
        label_4:
        while (true) {
            Edge();
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case PROBABILITY:
                    ;
                    break;
                default:
                    jj_la1[10] = jj_gen;
                    break label_4;
            }
        }
        {
            if (true) return graph;
        }
        throw new Error("Missing return statement in function");
    }

    final public void Node() throws ParseException {
        BBNNode node = new BBNNode();
        Token id = null;
        List values = null;
        Double xpos = null, ypos = null;
        String str = null;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case NODE:
                jj_consume_token(NODE);
                break;
            case UTILITY:
                jj_consume_token(UTILITY);
                node.setType(BBNNode.UTILITY);
                break;
            case DECISION:
                jj_consume_token(DECISION);
                node.setType(BBNNode.DECISION);
                break;
            default:
                jj_la1[11] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        id = jj_consume_token(IDENTIFIER);
        node.setName(id.image);
        node.setLabel(id.image);
        jj_consume_token(LBRACE);
        label_5:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case NAME:
                    jj_consume_token(NAME);
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case ASSIGN:
                            jj_consume_token(ASSIGN);
                            break;
                        case COLON:
                            jj_consume_token(COLON);
                            break;
                        default:
                            jj_la1[12] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                    str = StringLiteral();
                    node.setLabel(str);
                    break;
                case TYPE:
                    jj_consume_token(TYPE);
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case ASSIGN:
                            jj_consume_token(ASSIGN);
                            break;
                        case COLON:
                            jj_consume_token(COLON);
                            break;
                        default:
                            jj_la1[13] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                    jj_consume_token(DISCRETE);
                    jj_consume_token(LBRACKET);
                    NumberLiteral();
                    jj_consume_token(RBRACKET);
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case ASSIGN:
                            jj_consume_token(ASSIGN);
                            break;
                        case COLON:
                            jj_consume_token(COLON);
                            break;
                        default:
                            jj_la1[14] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                    jj_consume_token(LBRACE);
                    values = StringOrIDList();
                    jj_consume_token(RBRACE);
                    node.setValues(new BBNDiscreteValue(values));
                    break;
                case POSITION:
                    jj_consume_token(POSITION);
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case ASSIGN:
                            jj_consume_token(ASSIGN);
                            break;
                        case COLON:
                            jj_consume_token(COLON);
                            break;
                        default:
                            jj_la1[15] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                    jj_consume_token(LPAREN);
                    xpos = NumberLiteral();
                    jj_consume_token(COMMA);
                    ypos = NumberLiteral();
                    jj_consume_token(RPAREN);
                    Hashtable prop = new Hashtable();
                    LinkedList posList = new LinkedList();
                    posList.add(new Double((xpos.doubleValue() / 100) - 100));
                    posList.add(new Double((ypos.doubleValue() / 100) - 100));
                    prop.put("position", posList); // $NON-NLS-1$
                    node.setProperty(prop);
                    break;
                case IDENTIFIER:
                    jj_consume_token(IDENTIFIER);
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case ASSIGN:
                            jj_consume_token(ASSIGN);
                            break;
                        case COLON:
                            jj_consume_token(COLON);
                            break;
                        default:
                            jj_la1[16] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case INTEGER_LITERAL:
                        case FLOATING_POINT_LITERAL:
                        case MINUS:
                            NumberLiteral();
                            break;
                        case STRING_LITERAL:
                        case IDENTIFIER:
                            StringOrID();
                            break;
                        default:
                            jj_la1[17] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case ASSIGN:
                        case COLON:
                            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                                case ASSIGN:
                                    jj_consume_token(ASSIGN);
                                    break;
                                case COLON:
                                    jj_consume_token(COLON);
                                    break;
                                default:
                                    jj_la1[18] = jj_gen;
                                    jj_consume_token(-1);
                                    throw new ParseException();
                            }
                            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                                case INTEGER_LITERAL:
                                case FLOATING_POINT_LITERAL:
                                case MINUS:
                                    NumberLiteral();
                                    break;
                                case STRING_LITERAL:
                                case IDENTIFIER:
                                    StringOrID();
                                    break;
                                default:
                                    jj_la1[19] = jj_gen;
                                    jj_consume_token(-1);
                                    throw new ParseException();
                            }
                            break;
                        default:
                            jj_la1[20] = jj_gen;
                            ;
                    }
                    label_6:
                    while (true) {
                        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                            case COMMA:
                                ;
                                break;
                            default:
                                jj_la1[21] = jj_gen;
                                break label_6;
                        }
                        jj_consume_token(COMMA);
                        jj_consume_token(IDENTIFIER);
                        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                            case ASSIGN:
                                jj_consume_token(ASSIGN);
                                break;
                            case COLON:
                                jj_consume_token(COLON);
                                break;
                            default:
                                jj_la1[22] = jj_gen;
                                jj_consume_token(-1);
                                throw new ParseException();
                        }
                        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                            case INTEGER_LITERAL:
                            case FLOATING_POINT_LITERAL:
                            case MINUS:
                                NumberLiteral();
                                break;
                            case STRING_LITERAL:
                            case IDENTIFIER:
                                StringOrID();
                                break;
                            default:
                                jj_la1[23] = jj_gen;
                                jj_consume_token(-1);
                                throw new ParseException();
                        }
                    }
                    break;
                default:
                    jj_la1[24] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            jj_consume_token(SEMICOLON);
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case TYPE:
                case NAME:
                case POSITION:
                case IDENTIFIER:
                    ;
                    break;
                default:
                    jj_la1[25] = jj_gen;
                    break label_5;
            }
        }
        jj_consume_token(RBRACE);
        assert(node.isUtility() || values != null); // !node.isUtility() -> values != null
        graph.add(node);
        nodeCache.put(id.image, node);
    }

    final public void Edge() throws ParseException {
        String nodeID = null;
        List parentList = null, cptIndices = null, cptEntries = null;
        Hashtable cpts = new Hashtable();
        jj_consume_token(PROBABILITY);
        jj_consume_token(LPAREN);
        nodeID = StringOrID();
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case BIT_OR:
                jj_consume_token(BIT_OR);
                parentList = StringOrIDList();
                break;
            default:
                jj_la1[26] = jj_gen;
                ;
        }
        jj_consume_token(RPAREN);
        jj_consume_token(LBRACE);
        label_7:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case FUNCTION:
                    jj_consume_token(FUNCTION);
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case COLON:
                            jj_consume_token(COLON);
                            break;
                        case ASSIGN:
                            jj_consume_token(ASSIGN);
                            break;
                        default:
                            jj_la1[27] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                    jj_consume_token(IDENTIFIER);
                    break;
                case LPAREN:
                    jj_consume_token(LPAREN);
                    cptIndices = NumberList();
                    jj_consume_token(RPAREN);
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case COLON:
                            jj_consume_token(COLON);
                            break;
                        case ASSIGN:
                            jj_consume_token(ASSIGN);
                            break;
                        default:
                            jj_la1[28] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                    cptEntries = NumberList();
                    cpts.put(cptIndices, cptEntries);
                    break;
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case MINUS:
                    cptEntries = NumberList();
                    cpts.put(".default", cptEntries); // $NON-NLS-1$

                    break;
                case _DEFAULT:
                    jj_consume_token(_DEFAULT);
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case COLON:
                            jj_consume_token(COLON);
                            break;
                        case ASSIGN:
                            jj_consume_token(ASSIGN);
                            break;
                        default:
                            jj_la1[29] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                    cptEntries = NumberList();
                    cpts.put(".default", cptEntries); // $NON-NLS-1$

                    break;
                default:
                    jj_la1[30] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            jj_consume_token(SEMICOLON);
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case FUNCTION:
                case _DEFAULT:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case LPAREN:
                case MINUS:
                    ;
                    break;
                default:
                    jj_la1[31] = jj_gen;
                    break label_7;
            }
        }
        jj_consume_token(RBRACE);
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case SEMICOLON:
                jj_consume_token(SEMICOLON);
                break;
            default:
                jj_la1[32] = jj_gen;
                ;
        }
        processEdge(nodeID, parentList, cpts);
    }

    final public String StringLiteral() throws ParseException {
        Token t;
        t = jj_consume_token(STRING_LITERAL);
        {
            if (true) return t.image.substring(1, t.image.length() - 1);
        }
        throw new Error("Missing return statement in function");
    }

    final public Double NumberLiteral() throws ParseException {
        Token t;
        int sgn = 1;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case MINUS:
                jj_consume_token(MINUS);
                sgn = -1;
                break;
            default:
                jj_la1[33] = jj_gen;
                ;
        }
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case FLOATING_POINT_LITERAL:
                t = jj_consume_token(FLOATING_POINT_LITERAL);
                break;
            case INTEGER_LITERAL:
                t = jj_consume_token(INTEGER_LITERAL);
                break;
            default:
                jj_la1[34] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        {
            if (true) return new Double(sgn * Double.parseDouble(t.image));
        }
        throw new Error("Missing return statement in function");
    }

    final public List NumberList() throws ParseException {
        LinkedList list = new LinkedList();
        Double number;
        label_8:
        while (true) {
            number = NumberLiteral();
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case COMMA:
                    jj_consume_token(COMMA);
                    break;
                default:
                    jj_la1[35] = jj_gen;
                    ;
            }
            list.add(number);
            if (jj_2_1(3)) {
                ;
            } else {
                break label_8;
            }
        }
        {
            if (true) return list;
        }
        throw new Error("Missing return statement in function");
    }

    final public List StringOrIDList() throws ParseException {
        LinkedList list = new LinkedList();
        String _s = null;
        label_9:
        while (true) {
            _s = StringOrID();
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case COMMA:
                    jj_consume_token(COMMA);
                    break;
                default:
                    jj_la1[36] = jj_gen;
                    ;
            }
            list.add(_s);
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case STRING_LITERAL:
                case IDENTIFIER:
                    ;
                    break;
                default:
                    jj_la1[37] = jj_gen;
                    break label_9;
            }
        }
        {
            if (true) return list;
        }
        throw new Error("Missing return statement in function");
    }

    final public String StringOrID() throws ParseException {
        Token t = null;
        String s = null;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case IDENTIFIER:
                t = jj_consume_token(IDENTIFIER);
                {
                    if (true) return t.image;
                }
                break;
            case STRING_LITERAL:
                s = StringLiteral();
                {
                    if (true) return s;
                }
                break;
            default:
                jj_la1[38] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        throw new Error("Missing return statement in function");
    }

    final private boolean jj_2_1(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        boolean retval = !jj_3_1();
        jj_save(0, xla);
        return retval;
    }

    final private boolean jj_3R_11() {
        if (jj_scan_token(COMMA)) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
        return false;
    }

    final private boolean jj_3R_13() {
        if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
        return false;
    }

    final private boolean jj_3R_12() {
        if (jj_scan_token(MINUS)) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
        return false;
    }

    final private boolean jj_3R_14() {
        if (jj_scan_token(INTEGER_LITERAL)) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
        return false;
    }

    final private boolean jj_3_1() {
        if (jj_3R_10()) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_11())
            jj_scanpos = xsp;
        else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
        return false;
    }

    final private boolean jj_3R_10() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_12())
            jj_scanpos = xsp;
        else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
        xsp = jj_scanpos;
        if (jj_3R_13()) {
            jj_scanpos = xsp;
            if (jj_3R_14()) return true;
            if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
        return false;
    }

    public DscParserTokenManager token_source;
    JavaCharStream jj_input_stream;
    public Token token, jj_nt;
    private int jj_ntk;
    private Token jj_scanpos, jj_lastpos;
    private int jj_la;
    public boolean lookingAhead = false;
    private boolean jj_semLA;
    private int jj_gen;
    final private int[] jj_la1 = new int[39];
    final private int[] jj_la1_0 = {0x0, 0x104000, 0x104000, 0x104000, 0x20202000, 0x88000, 0x88000, 0x60000, 0x20202000, 0xc001000, 0x800000, 0xc001000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20000000, 0x0, 0x20000000, 0x0, 0x0, 0x0, 0x20000000, 0x602000, 0x602000, 0x0, 0x0, 0x0, 0x0, 0x31000000, 0x31000000, 0x0, 0x0, 0x20000000, 0x0, 0x0, 0x0, 0x0, };
    final private int[] jj_la1_1 = {0x800, 0x10000, 0x0, 0x0, 0x20bc0812, 0x0, 0x0, 0x0, 0x20bc0812, 0x0, 0x0, 0x0, 0x20800000, 0x20800000, 0x20800000, 0x20800000, 0x20800000, 0x812, 0x20800000, 0x812, 0x20800000, 0x200000, 0x20800000, 0x812, 0x800, 0x800, 0x0, 0x20800000, 0x20800000, 0x20800000, 0x4002, 0x4002, 0x100000, 0x0, 0x2, 0x200000, 0x200000, 0x810, 0x810, };
    final private int[] jj_la1_2 = {0x0, 0x0, 0x0, 0x0, 0x100, 0x0, 0x0, 0x0, 0x100, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x100, 0x0, 0x100, 0x0, 0x0, 0x0, 0x100, 0x0, 0x0, 0x1000, 0x0, 0x0, 0x0, 0x100, 0x100, 0x0, 0x100, 0x0, 0x0, 0x0, 0x0, 0x0, };
    final private JJCalls[] jj_2_rtns = new JJCalls[1];
    private boolean jj_rescan = false;
    private int jj_gc = 0;

    public DscParser(java.io.InputStream stream) {
        jj_input_stream = new JavaCharStream(stream, 1, 1);
        token_source = new DscParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 39; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    public void ReInit(java.io.InputStream stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 39; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    public DscParser(java.io.Reader stream) {
        jj_input_stream = new JavaCharStream(stream, 1, 1);
        token_source = new DscParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 39; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 39; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    public DscParser(DscParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 39; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    public void ReInit(DscParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 39; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    final private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null)
            token = token.next;
        else
            token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            if (++jj_gc > 100) {
                jj_gc = 0;
                for (int i = 0; i < jj_2_rtns.length; i++) {
                    JJCalls c = jj_2_rtns[i];
                    while (c != null) {
                        if (c.gen < jj_gen) c.first = null;
                        c = c.next;
                    }
                }
            }
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    final private boolean jj_scan_token(int kind) {
        if (jj_scanpos == jj_lastpos) {
            jj_la--;
            if (jj_scanpos.next == null) {
                jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
            } else {
                jj_lastpos = jj_scanpos = jj_scanpos.next;
            }
        } else {
            jj_scanpos = jj_scanpos.next;
        }
        if (jj_rescan) {
            int i = 0;
            Token tok = token;
            while (tok != null && tok != jj_scanpos) {
                i++;
                tok = tok.next;
            }
            if (tok != null) jj_add_error_token(kind, i);
        }
        return (jj_scanpos.kind != kind);
    }

    final public Token getNextToken() {
        if (token.next != null)
            token = token.next;
        else
            token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    final public Token getToken(int index) {
        Token t = lookingAhead ? jj_scanpos : token;
        for (int i = 0; i < index; i++) {
            if (t.next != null)
                t = t.next;
            else
                t = t.next = token_source.getNextToken();
        }
        return t;
    }

    final private int jj_ntk() {
        if ((jj_nt = token.next) == null)
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        else
            return (jj_ntk = jj_nt.kind);
    }

    private java.util.Vector jj_expentries = new java.util.Vector();
    private int[] jj_expentry;
    private int jj_kind = -1;
    private int[] jj_lasttokens = new int[100];
    private int jj_endpos;

    private void jj_add_error_token(int kind, int pos) {
        if (pos >= 100) return;
        if (pos == jj_endpos + 1) {
            jj_lasttokens[jj_endpos++] = kind;
        } else if (jj_endpos != 0) {
            jj_expentry = new int[jj_endpos];
            for (int i = 0; i < jj_endpos; i++) {
                jj_expentry[i] = jj_lasttokens[i];
            }
            boolean exists = false;
            for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
                int[] oldentry = (int[]) (e.nextElement());
                if (oldentry.length == jj_expentry.length) {
                    exists = true;
                    for (int i = 0; i < jj_expentry.length; i++) {
                        if (oldentry[i] != jj_expentry[i]) {
                            exists = false;
                            break;
                        }
                    }
                    if (exists) break;
                }
            }
            if (!exists) jj_expentries.addElement(jj_expentry);
            if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
        }
    }

    final public ParseException generateParseException() {
        jj_expentries.removeAllElements();
        boolean[] la1tokens = new boolean[94];
        for (int i = 0; i < 94; i++) {
            la1tokens[i] = false;
        }
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 39; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & (1 << j)) != 0) {
                        la1tokens[32 + j] = true;
                    }
                    if ((jj_la1_2[i] & (1 << j)) != 0) {
                        la1tokens[64 + j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 94; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.addElement(jj_expentry);
            }
        }
        jj_endpos = 0;
        jj_rescan_token();
        jj_add_error_token(0, 0);
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = (int[]) jj_expentries.elementAt(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    final public void enable_tracing() {
    }

    final public void disable_tracing() {
    }

    final private void jj_rescan_token() {
        jj_rescan = true;
        for (int i = 0; i < 1; i++) {
            JJCalls p = jj_2_rtns[i];
            do {
                if (p.gen > jj_gen) {
                    jj_la = p.arg;
                    jj_lastpos = jj_scanpos = p.first;
                    switch (i) {
                        case 0:
                            jj_3_1();
                            break;
                    }
                }
                p = p.next;
            } while (p != null);
        }
        jj_rescan = false;
    }

    final private void jj_save(int index, int xla) {
        JJCalls p = jj_2_rtns[index];
        while (p.gen > jj_gen) {
            if (p.next == null) {
                p = p.next = new JJCalls();
                break;
            }
            p = p.next;
        }
        p.gen = jj_gen + xla - jj_la;
        p.first = token;
        p.arg = xla;
    }

    static final class JJCalls {
        int gen;
        Token first;
        int arg;
        JJCalls next;
    }

}
